#include "FieldAggregationsTest.h"

namespace FieldAggregations
{
    PrimitiveField primitive;
    PrimitivePointerField primitivePointer;

    ObjectField object;
    ObjectPointerField objectPointer;

    IP_Array ipArray;
    IP_StlArray ipStlArray;
    IP_Vector ipVector;
    IP_Deque ipDeque;
    IP_ForwardList ipForwardList;
    IP_List ipList;
    IP_Stack ipStack;
    IP_Queue ipQueue;
    IP_PriorityQueue ipPriorityQueue;
    IP_Set ipSet;
    IP_MultiSet ipMultiSet;
    IP_UnorderedSet ipUnorderedSet;
    IP_UnorderedMultiSet ipUnorderedMultiSet;

    IPP_Array ippArray;
    IPP_StlArray ippStlArray;
    IPP_Vector ippVector;
    IPP_Deque ippDeque;
    IPP_ForwardList ippForwardList;
    IPP_List ippList;
    IPP_Stack ippStack;
    IPP_Queue ippQueue;
    IPP_PriorityQueue ippPriorityQueue;
    IPP_Set ippSet;
    IPP_MultiSet ippMultiSet;
    IPP_UnorderedSet ippUnorderedSet;
    IPP_UnorderedMultiSet ippUnorderedMultiSet;

    IPA_Array ipaArray;
    IPA_StlArray ipaStlArray;
    IPA_Vector ipaVector;
    IPA_Deque ipaDeque;
    IPA_ForwardList ipaForwardList;
    IPA_List ipaList;
    IPA_Set ipaSet;
    IPA_MultiSet ipaMultiSet;
    IPA_Map ipaMap;
    IPA_MultiMap ipaMultiMap;
    IPA_UnorderedMap ipaUnorderedMap;
    IPA_UnorderedMultimap ipaUnorderedMultimap;

    IPPA_Array ippaArray;
    IPPA_StlArray ippaStlArray;
    IPPA_Vector ippaVector;
    IPPA_Deque ippaDeque;
    IPPA_ForwardList ippaForwardList;
    IPPA_List ippaList;
    IPPA_Set ippaSet;
    IPPA_MultiSet ippaMultiSet;
    IPPA_Map ippaMap;
    IPPA_MultiMap ippaMultiMap;
    IPPA_UnorderedMap ippaUnorderedMap;
    IPPA_UnorderedMultimap ippaUnorderedMultimap;

    IO_Array ioArray;
    IO_StlArray ioStlArray;
    IO_Vector ioVector;
    IO_Deque ioDeque;
    IO_ForwardList ioForwardList;
    IO_List ioList;
    IO_Stack ioStack;
    IO_Queue ioQueue;
    IO_PriorityQueue ioPriorityQueue;
    IO_Set ioSet;
    IO_MultiSet ioMultiSet;
    IO_UnorderedSet ioUnorderedSet;
    IO_UnorderedMultiSet ioUnorderedMultiSet;

    IOP_Array iopArray;
    IOP_StlArray iopStlArray;
    IOP_Vector iopVector;
    IOP_Deque iopDeque;
    IOP_ForwardList iopForwardList;
    IOP_List iopList;
    IOP_Stack iopStack;
    IOP_Queue iopQueue;
    IOP_PriorityQueue iopPriorityQueue;
    IOP_Set iopSet;
    IOP_MultiSet iopMultiSet;
    IOP_UnorderedSet iopUnorderedSet;
    IOP_UnorderedMultiSet iopUnorderedMultiSet;

    IOA_Array ioaArray;
    IOA_StlArray ioaStlArray;
    IOA_Vector ioaVector;
    IOA_Deque ioaDeque;
    IOA_ForwardList ioaForwardList;
    IOA_List ioaList;
    IOA_Set ioaSet;
    IOA_MultiSet ioaMultiSet;
    IOA_Map ioaMap;
    IOA_MultiMap ioaMultiMap;
    IOA_UnorderedMap ioaUnorderedMap;
    IOA_UnorderedMultimap ioaUnorderedMultimap;

    IOPA_Array iopaArray;
    IOPA_StlArray iopaStlArray;
    IOPA_Vector iopaVector;
    IOPA_Deque iopaDeque;
    IOPA_ForwardList iopaForwardList;
    IOPA_List iopaList;
    IOPA_Set iopaSet;
    IOPA_MultiSet iopaMultiSet;
    IOPA_Map iopaMap;
    IOPA_MultiMap iopaMultiMap;
    IOPA_UnorderedMap iopaUnorderedMap;
    IOPA_UnorderedMultimap iopaUnorderedMultimap;



    PP_Array ppArray;
    PP_StlArray ppStlArray;
    PP_Vector ppVector;
    PP_Deque ppDeque;
    PP_ForwardList ppForwardList;
    PP_List ppList;
    PP_Stack ppStack;
    PP_Queue ppQueue;
    PP_PriorityQueue ppPriorityQueue;
    PP_Set ppSet;
    PP_MultiSet ppMultiSet;
    PP_UnorderedSet ppUnorderedSet;
    PP_UnorderedMultiSet ppUnorderedMultiSet;

    PPP_Array pppArray;
    PPP_StlArray pppStlArray;
    PPP_Vector pppVector;
    PPP_Deque pppDeque;
    PPP_ForwardList pppForwardList;
    PPP_List pppList;
    PPP_Stack pppStack;
    PPP_Queue pppQueue;
    PPP_PriorityQueue pppPriorityQueue;
    PPP_Set pppSet;
    PPP_MultiSet pppMultiSet;
    PPP_UnorderedSet pppUnorderedSet;
    PPP_UnorderedMultiSet pppUnorderedMultiSet;

    PPA_Array ppaArray;
    PPA_StlArray ppaStlArray;
    PPA_Vector ppaVector;
    PPA_Deque ppaDeque;
    PPA_ForwardList ppaForwardList;
    PPA_List ppaList;
    PPA_Set ppaSet;
    PPA_MultiSet ppaMultiSet;
    PPA_Map ppaMap;
    PPA_MultiMap ppaMultiMap;
    PPA_UnorderedMap ppaUnorderedMap;
    PPA_UnorderedMultimap ppaUnorderedMultimap;

    PPPA_Array pppaArray;
    PPPA_StlArray pppaStlArray;
    PPPA_Vector pppaVector;
    PPPA_Deque pppaDeque;
    PPPA_ForwardList pppaForwardList;
    PPPA_List pppaList;
    PPPA_Set pppaSet;
    PPPA_MultiSet pppaMultiSet;
    PPPA_Map pppaMap;
    PPPA_MultiMap pppaMultiMap;
    PPPA_UnorderedMap pppaUnorderedMap;
    PPPA_UnorderedMultimap pppaUnorderedMultimap;

    PO_Array poArray;
    PO_StlArray poStlArray;
    PO_Vector poVector;
    PO_Deque poDeque;
    PO_ForwardList poForwardList;
    PO_List poList;
    PO_Stack poStack;
    PO_Queue poQueue;
    PO_PriorityQueue poPriorityQueue;
    PO_Set poSet;
    PO_MultiSet poMultiSet;
    PO_UnorderedSet poUnorderedSet;
    PO_UnorderedMultiSet poUnorderedMultiSet;

    POP_Array popArray;
    POP_StlArray popStlArray;
    POP_Vector popVector;
    POP_Deque popDeque;
    POP_ForwardList popForwardList;
    POP_List popList;
    POP_Stack popStack;
    POP_Queue popQueue;
    POP_PriorityQueue popPriorityQueue;
    POP_Set popSet;
    POP_MultiSet popMultiSet;
    POP_UnorderedSet popUnorderedSet;
    POP_UnorderedMultiSet popUnorderedMultiSet;

    POA_Array poaArray;
    POA_StlArray poaStlArray;
    POA_Vector poaVector;
    POA_Deque poaDeque;
    POA_ForwardList poaForwardList;
    POA_List poaList;
    POA_Set poaSet;
    POA_MultiSet poaMultiSet;
    POA_Map poaMap;
    POA_MultiMap poaMultiMap;
    POA_UnorderedMap poaUnorderedMap;
    POA_UnorderedMultimap poaUnorderedMultimap;

    POPA_Array popaArray;
    POPA_StlArray popaStlArray;
    POPA_Vector popaVector;
    POPA_Deque popaDeque;
    POPA_ForwardList popaForwardList;
    POPA_List popaList;
    POPA_Set popaSet;
    POPA_MultiSet popaMultiSet;
    POPA_Map popaMap;
    POPA_MultiMap popaMultiMap;
    POPA_UnorderedMap popaUnorderedMap;
    POPA_UnorderedMultimap popaUnorderedMultimap;



    decltype(primitive)::type primitiveVal;

    decltype(primitivePointer)::type primitivePointerVal = nullptr;

    decltype(object)::type objectVal;

    decltype(objectPointer)::type objectPointerVal = nullptr;


    decltype(ipArray)::type ipArrayVal;
    decltype(ipStlArray)::type ipStlArrayVal;
    decltype(ipVector)::type ipVectorVal;
    decltype(ipDeque)::type ipDequeVal;
    decltype(ipForwardList)::type ipForwardListVal;
    decltype(ipList)::type ipListVal;
    decltype(ipStack)::type ipStackVal;
    decltype(ipQueue)::type ipQueueVal;
    decltype(ipPriorityQueue)::type ipPriorityQueueVal;
    decltype(ipSet)::type ipSetVal;
    decltype(ipMultiSet)::type ipMultiSetVal;
    decltype(ipUnorderedSet)::type ipUnorderedSetVal;
    decltype(ipUnorderedMultiSet)::type ipUnorderedMultiSetVal;

    decltype(ippArray)::type ippArrayVal;
    decltype(ippStlArray)::type ippStlArrayVal;
    decltype(ippVector)::type ippVectorVal;
    decltype(ippDeque)::type ippDequeVal;
    decltype(ippForwardList)::type ippForwardListVal;
    decltype(ippList)::type ippListVal;
    decltype(ippStack)::type ippStackVal;
    decltype(ippQueue)::type ippQueueVal;
    decltype(ippPriorityQueue)::type ippPriorityQueueVal;
    decltype(ippSet)::type ippSetVal;
    decltype(ippMultiSet)::type ippMultiSetVal;
    decltype(ippUnorderedSet)::type ippUnorderedSetVal;
    decltype(ippUnorderedMultiSet)::type ippUnorderedMultiSetVal;

    decltype(ipaStlArray)::type ipaStlArrayVal;
    decltype(ipaVector)::type ipaVectorVal;
    decltype(ipaDeque)::type ipaDequeVal;
    decltype(ipaForwardList)::type ipaForwardListVal;
    decltype(ipaList)::type ipaListVal;
    decltype(ipaSet)::type ipaSetVal;
    decltype(ipaMultiSet)::type ipaMultiSetVal;
    decltype(ipaMap)::type ipaMapVal;
    decltype(ipaMultiMap)::type ipaMultiMapVal;
    decltype(ipaUnorderedMap)::type ipaUnorderedMapVal;
    decltype(ipaUnorderedMultimap)::type ipaUnorderedMultimapVal;

    decltype(ippaStlArray)::type ippaStlArrayVal;
    decltype(ippaVector)::type ippaVectorVal;
    decltype(ippaDeque)::type ippaDequeVal;
    decltype(ippaForwardList)::type ippaForwardListVal;
    decltype(ippaList)::type ippaListVal;
    decltype(ippaSet)::type ippaSetVal;
    decltype(ippaMultiSet)::type ippaMultiSetVal;
    decltype(ippaMap)::type ippaMapVal;
    decltype(ippaMultiMap)::type ippaMultiMapVal;
    decltype(ippaUnorderedMap)::type ippaUnorderedMapVal;
    decltype(ippaUnorderedMultimap)::type ippaUnorderedMultimapVal;

    decltype(ioArray)::type ioArrayVal;
    decltype(ioStlArray)::type ioStlArrayVal;
    decltype(ioVector)::type ioVectorVal;
    decltype(ioDeque)::type ioDequeVal;
    decltype(ioForwardList)::type ioForwardListVal;
    decltype(ioList)::type ioListVal;
    decltype(ioStack)::type ioStackVal;
    decltype(ioQueue)::type ioQueueVal;
    decltype(ioPriorityQueue)::type ioPriorityQueueVal;
    decltype(ioSet)::type ioSetVal;
    decltype(ioMultiSet)::type ioMultiSetVal;
    decltype(ioUnorderedSet)::type ioUnorderedSetVal;
    decltype(ioUnorderedMultiSet)::type ioUnorderedMultiSetVal;

    decltype(iopArray)::type iopArrayVal;
    decltype(iopStlArray)::type iopStlArrayVal;
    decltype(iopVector)::type iopVectorVal;
    decltype(iopDeque)::type iopDequeVal;
    decltype(iopForwardList)::type iopForwardListVal;
    decltype(iopList)::type iopListVal;
    decltype(iopStack)::type iopStackVal;
    decltype(iopQueue)::type iopQueueVal;
    decltype(iopPriorityQueue)::type iopPriorityQueueVal;
    decltype(iopSet)::type iopSetVal;
    decltype(iopMultiSet)::type iopMultiSetVal;
    decltype(iopUnorderedSet)::type iopUnorderedSetVal;
    decltype(iopUnorderedMultiSet)::type iopUnorderedMultiSetVal;

    decltype(ioaStlArray)::type ioaStlArrayVal;
    decltype(ioaVector)::type ioaVectorVal;
    decltype(ioaDeque)::type ioaDequeVal;
    decltype(ioaForwardList)::type ioaForwardListVal;
    decltype(ioaList)::type ioaListVal;
    decltype(ioaSet)::type ioaSetVal;
    decltype(ioaMultiSet)::type ioaMultiSetVal;
    decltype(ioaMap)::type ioaMapVal;
    decltype(ioaMultiMap)::type ioaMultiMapVal;
    decltype(ioaUnorderedMap)::type ioaUnorderedMapVal;
    decltype(ioaUnorderedMultimap)::type ioaUnorderedMultimapVal;

    decltype(iopaStlArray)::type iopaStlArrayVal;
    decltype(iopaVector)::type iopaVectorVal;
    decltype(iopaDeque)::type iopaDequeVal;
    decltype(iopaForwardList)::type iopaForwardListVal;
    decltype(iopaList)::type iopaListVal;
    decltype(iopaSet)::type iopaSetVal;
    decltype(iopaMultiSet)::type iopaMultiSetVal;
    decltype(iopaMap)::type iopaMapVal;
    decltype(iopaMultiMap)::type iopaMultiMapVal;
    decltype(iopaUnorderedMap)::type iopaUnorderedMapVal;
    decltype(iopaUnorderedMultimap)::type iopaUnorderedMultimapVal;

    decltype(ppArray)::type ppArrayVal = nullptr;
    decltype(ppStlArray)::type ppStlArrayVal = nullptr;
    decltype(ppVector)::type ppVectorVal = nullptr;
    decltype(ppDeque)::type ppDequeVal = nullptr;
    decltype(ppForwardList)::type ppForwardListVal = nullptr;
    decltype(ppList)::type ppListVal = nullptr;
    decltype(ppStack)::type ppStackVal = nullptr;
    decltype(ppQueue)::type ppQueueVal = nullptr;
    decltype(ppPriorityQueue)::type ppPriorityQueueVal = nullptr;
    decltype(ppSet)::type ppSetVal = nullptr;
    decltype(ppMultiSet)::type ppMultiSetVal = nullptr;
    decltype(ppUnorderedSet)::type ppUnorderedSetVal = nullptr;
    decltype(ppUnorderedMultiSet)::type ppUnorderedMultiSetVal = nullptr;

    decltype(pppArray)::type pppArrayVal = nullptr;
    decltype(pppStlArray)::type pppStlArrayVal = nullptr;
    decltype(pppVector)::type pppVectorVal = nullptr;
    decltype(pppDeque)::type pppDequeVal = nullptr;
    decltype(pppForwardList)::type pppForwardListVal = nullptr;
    decltype(pppList)::type pppListVal = nullptr;
    decltype(pppStack)::type pppStackVal = nullptr;
    decltype(pppQueue)::type pppQueueVal = nullptr;
    decltype(pppPriorityQueue)::type pppPriorityQueueVal = nullptr;
    decltype(pppSet)::type pppSetVal = nullptr;
    decltype(pppMultiSet)::type pppMultiSetVal = nullptr;
    decltype(pppUnorderedSet)::type pppUnorderedSetVal = nullptr;
    decltype(pppUnorderedMultiSet)::type pppUnorderedMultiSetVal = nullptr;

    decltype(ppaStlArray)::type ppaStlArrayVal = nullptr;
    decltype(ppaVector)::type ppaVectorVal = nullptr;
    decltype(ppaDeque)::type ppaDequeVal = nullptr;
    decltype(ppaForwardList)::type ppaForwardListVal = nullptr;
    decltype(ppaList)::type ppaListVal = nullptr;
    decltype(ppaSet)::type ppaSetVal = nullptr;
    decltype(ppaMultiSet)::type ppaMultiSetVal = nullptr;
    decltype(ppaMap)::type ppaMapVal = nullptr;
    decltype(ppaMultiMap)::type ppaMultiMapVal = nullptr;
    decltype(ppaUnorderedMap)::type ppaUnorderedMapVal = nullptr;
    decltype(ppaUnorderedMultimap)::type ppaUnorderedMultimapVal = nullptr;

    decltype(pppaStlArray)::type pppaStlArrayVal = nullptr;
    decltype(pppaVector)::type pppaVectorVal = nullptr;
    decltype(pppaDeque)::type pppaDequeVal = nullptr;
    decltype(pppaForwardList)::type pppaForwardListVal = nullptr;
    decltype(pppaList)::type pppaListVal = nullptr;
    decltype(pppaSet)::type pppaSetVal = nullptr;
    decltype(pppaMultiSet)::type pppaMultiSetVal = nullptr;
    decltype(pppaMap)::type pppaMapVal = nullptr;
    decltype(pppaMultiMap)::type pppaMultiMapVal = nullptr;
    decltype(pppaUnorderedMap)::type pppaUnorderedMapVal = nullptr;
    decltype(pppaUnorderedMultimap)::type pppaUnorderedMultimapVal = nullptr;

    decltype(poArray)::type poArrayVal = nullptr;
    decltype(poStlArray)::type poStlArrayVal = nullptr;
    decltype(poVector)::type poVectorVal = nullptr;
    decltype(poDeque)::type poDequeVal = nullptr;
    decltype(poForwardList)::type poForwardListVal = nullptr;
    decltype(poList)::type poListVal = nullptr;
    decltype(poStack)::type poStackVal = nullptr;
    decltype(poQueue)::type poQueueVal = nullptr;
    decltype(poPriorityQueue)::type poPriorityQueueVal = nullptr;
    decltype(poSet)::type poSetVal = nullptr;
    decltype(poMultiSet)::type poMultiSetVal = nullptr;
    decltype(poUnorderedSet)::type poUnorderedSetVal = nullptr;
    decltype(poUnorderedMultiSet)::type poUnorderedMultiSetVal = nullptr;

    decltype(popArray)::type popArrayVal = nullptr;
    decltype(popStlArray)::type popStlArrayVal = nullptr;
    decltype(popVector)::type popVectorVal = nullptr;
    decltype(popDeque)::type popDequeVal = nullptr;
    decltype(popForwardList)::type popForwardListVal = nullptr;
    decltype(popList)::type popListVal = nullptr;
    decltype(popStack)::type popStackVal = nullptr;
    decltype(popQueue)::type popQueueVal = nullptr;
    decltype(popPriorityQueue)::type popPriorityQueueVal = nullptr;
    decltype(popSet)::type popSetVal = nullptr;
    decltype(popMultiSet)::type popMultiSetVal = nullptr;
    decltype(popUnorderedSet)::type popUnorderedSetVal = nullptr;
    decltype(popUnorderedMultiSet)::type popUnorderedMultiSetVal = nullptr;

    decltype(poaStlArray)::type poaStlArrayVal = nullptr;
    decltype(poaVector)::type poaVectorVal = nullptr;
    decltype(poaDeque)::type poaDequeVal = nullptr;
    decltype(poaForwardList)::type poaForwardListVal = nullptr;
    decltype(poaList)::type poaListVal = nullptr;
    decltype(poaSet)::type poaSetVal = nullptr;
    decltype(poaMultiSet)::type poaMultiSetVal = nullptr;
    decltype(poaMap)::type poaMapVal = nullptr;
    decltype(poaMultiMap)::type poaMultiMapVal = nullptr;
    decltype(poaUnorderedMap)::type poaUnorderedMapVal = nullptr;
    decltype(poaUnorderedMultimap)::type poaUnorderedMultimapVal = nullptr;

    decltype(popaStlArray)::type popaStlArrayVal = nullptr;
    decltype(popaVector)::type popaVectorVal = nullptr;
    decltype(popaDeque)::type popaDequeVal = nullptr;
    decltype(popaForwardList)::type popaForwardListVal = nullptr;
    decltype(popaList)::type popaListVal = nullptr;
    decltype(popaSet)::type popaSetVal = nullptr;
    decltype(popaMultiSet)::type popaMultiSetVal = nullptr;
    decltype(popaMap)::type popaMapVal = nullptr;
    decltype(popaMultiMap)::type popaMultiMapVal = nullptr;
    decltype(popaUnorderedMap)::type popaUnorderedMapVal = nullptr;
    decltype(popaUnorderedMultimap)::type popaUnorderedMultimapVal = nullptr;

    int someInt = 0;
    void* validPointer = &someInt;

    bool v = false; // visited
    std::function<void(int)> f([&](int){v=T;});
    
    TEST(FieldAggregationsTest, IfPointer)
    {
        v=primitive.IsPointer; EXPECT_FALSE(v);

        v=primitivePointer.IsPointer; EXPECT_TRUE(v);

        v=object.IsPointer; EXPECT_FALSE(v);

        v=objectPointer.IsPointer; EXPECT_TRUE(v);


        v=ipArray.IsPointer; EXPECT_FALSE(v);
        v=ipStlArray.IsPointer; EXPECT_FALSE(v);
        v=ipVector.IsPointer; EXPECT_FALSE(v);
        v=ipDeque.IsPointer; EXPECT_FALSE(v);
        v=ipForwardList.IsPointer; EXPECT_FALSE(v);
        v=ipList.IsPointer; EXPECT_FALSE(v);
        v=ipStack.IsPointer; EXPECT_FALSE(v);
        v=ipQueue.IsPointer; EXPECT_FALSE(v);
        v=ipPriorityQueue.IsPointer; EXPECT_FALSE(v);
        v=ipSet.IsPointer; EXPECT_FALSE(v);
        v=ipMultiSet.IsPointer; EXPECT_FALSE(v);
        v=ipUnorderedSet.IsPointer; EXPECT_FALSE(v);
        v=ipUnorderedMultiSet.IsPointer; EXPECT_FALSE(v);

        v=ippArray.IsPointer; EXPECT_FALSE(v);
        v=ippStlArray.IsPointer; EXPECT_FALSE(v);
        v=ippVector.IsPointer; EXPECT_FALSE(v);
        v=ippDeque.IsPointer; EXPECT_FALSE(v);
        v=ippForwardList.IsPointer; EXPECT_FALSE(v);
        v=ippList.IsPointer; EXPECT_FALSE(v);
        v=ippStack.IsPointer; EXPECT_FALSE(v);
        v=ippQueue.IsPointer; EXPECT_FALSE(v);
        v=ippPriorityQueue.IsPointer; EXPECT_FALSE(v);
        v=ippSet.IsPointer; EXPECT_FALSE(v);
        v=ippMultiSet.IsPointer; EXPECT_FALSE(v);
        v=ippUnorderedSet.IsPointer; EXPECT_FALSE(v);
        v=ippUnorderedMultiSet.IsPointer; EXPECT_FALSE(v);

        v=ipaStlArray.IsPointer; EXPECT_FALSE(v);
        v=ipaVector.IsPointer; EXPECT_FALSE(v);
        v=ipaDeque.IsPointer; EXPECT_FALSE(v);
        v=ipaForwardList.IsPointer; EXPECT_FALSE(v);
        v=ipaList.IsPointer; EXPECT_FALSE(v);
        v=ipaSet.IsPointer; EXPECT_FALSE(v);
        v=ipaMultiSet.IsPointer; EXPECT_FALSE(v);
        v=ipaMap.IsPointer; EXPECT_FALSE(v);
        v=ipaMultiMap.IsPointer; EXPECT_FALSE(v);
        v=ipaUnorderedMap.IsPointer; EXPECT_FALSE(v);
        v=ipaUnorderedMultimap.IsPointer; EXPECT_FALSE(v);

        v=ippaStlArray.IsPointer; EXPECT_FALSE(v);
        v=ippaVector.IsPointer; EXPECT_FALSE(v);
        v=ippaDeque.IsPointer; EXPECT_FALSE(v);
        v=ippaForwardList.IsPointer; EXPECT_FALSE(v);
        v=ippaList.IsPointer; EXPECT_FALSE(v);
        v=ippaSet.IsPointer; EXPECT_FALSE(v);
        v=ippaMultiSet.IsPointer; EXPECT_FALSE(v);
        v=ippaMap.IsPointer; EXPECT_FALSE(v);
        v=ippaMultiMap.IsPointer; EXPECT_FALSE(v);
        v=ippaUnorderedMap.IsPointer; EXPECT_FALSE(v);
        v=ippaUnorderedMultimap.IsPointer; EXPECT_FALSE(v);

        v=ioArray.IsPointer; EXPECT_FALSE(v);
        v=ioStlArray.IsPointer; EXPECT_FALSE(v);
        v=ioVector.IsPointer; EXPECT_FALSE(v);
        v=ioDeque.IsPointer; EXPECT_FALSE(v);
        v=ioForwardList.IsPointer; EXPECT_FALSE(v);
        v=ioList.IsPointer; EXPECT_FALSE(v);
        v=ioStack.IsPointer; EXPECT_FALSE(v);
        v=ioQueue.IsPointer; EXPECT_FALSE(v);
        v=ioPriorityQueue.IsPointer; EXPECT_FALSE(v);
        v=ioSet.IsPointer; EXPECT_FALSE(v);
        v=ioMultiSet.IsPointer; EXPECT_FALSE(v);
        v=ioUnorderedSet.IsPointer; EXPECT_FALSE(v);
        v=ioUnorderedMultiSet.IsPointer; EXPECT_FALSE(v);

        v=iopArray.IsPointer; EXPECT_FALSE(v);
        v=iopStlArray.IsPointer; EXPECT_FALSE(v);
        v=iopVector.IsPointer; EXPECT_FALSE(v);
        v=iopDeque.IsPointer; EXPECT_FALSE(v);
        v=iopForwardList.IsPointer; EXPECT_FALSE(v);
        v=iopList.IsPointer; EXPECT_FALSE(v);
        v=iopStack.IsPointer; EXPECT_FALSE(v);
        v=iopQueue.IsPointer; EXPECT_FALSE(v);
        v=iopPriorityQueue.IsPointer; EXPECT_FALSE(v);
        v=iopSet.IsPointer; EXPECT_FALSE(v);
        v=iopMultiSet.IsPointer; EXPECT_FALSE(v);
        v=iopUnorderedSet.IsPointer; EXPECT_FALSE(v);
        v=iopUnorderedMultiSet.IsPointer; EXPECT_FALSE(v);

        v=ioaStlArray.IsPointer; EXPECT_FALSE(v);
        v=ioaVector.IsPointer; EXPECT_FALSE(v);
        v=ioaDeque.IsPointer; EXPECT_FALSE(v);
        v=ioaForwardList.IsPointer; EXPECT_FALSE(v);
        v=ioaList.IsPointer; EXPECT_FALSE(v);
        v=ioaSet.IsPointer; EXPECT_FALSE(v);
        v=ioaMultiSet.IsPointer; EXPECT_FALSE(v);
        v=ioaMap.IsPointer; EXPECT_FALSE(v);
        v=ioaMultiMap.IsPointer; EXPECT_FALSE(v);
        v=ioaUnorderedMap.IsPointer; EXPECT_FALSE(v);
        v=ioaUnorderedMultimap.IsPointer; EXPECT_FALSE(v);

        v=iopaStlArray.IsPointer; EXPECT_FALSE(v);
        v=iopaVector.IsPointer; EXPECT_FALSE(v);
        v=iopaDeque.IsPointer; EXPECT_FALSE(v);
        v=iopaForwardList.IsPointer; EXPECT_FALSE(v);
        v=iopaList.IsPointer; EXPECT_FALSE(v);
        v=iopaSet.IsPointer; EXPECT_FALSE(v);
        v=iopaMultiSet.IsPointer; EXPECT_FALSE(v);
        v=iopaMap.IsPointer; EXPECT_FALSE(v);
        v=iopaMultiMap.IsPointer; EXPECT_FALSE(v);
        v=iopaUnorderedMap.IsPointer; EXPECT_FALSE(v);
        v=iopaUnorderedMultimap.IsPointer; EXPECT_FALSE(v);


        v=ppArray.IsPointer; EXPECT_TRUE(v);
        v=ppStlArray.IsPointer; EXPECT_TRUE(v);
        v=ppVector.IsPointer; EXPECT_TRUE(v);
        v=ppDeque.IsPointer; EXPECT_TRUE(v);
        v=ppForwardList.IsPointer; EXPECT_TRUE(v);
        v=ppList.IsPointer; EXPECT_TRUE(v);
        v=ppStack.IsPointer; EXPECT_TRUE(v);
        v=ppQueue.IsPointer; EXPECT_TRUE(v);
        v=ppPriorityQueue.IsPointer; EXPECT_TRUE(v);
        v=ppSet.IsPointer; EXPECT_TRUE(v);
        v=ppMultiSet.IsPointer; EXPECT_TRUE(v);
        v=ppUnorderedSet.IsPointer; EXPECT_TRUE(v);
        v=ppUnorderedMultiSet.IsPointer; EXPECT_TRUE(v);

        v=pppArray.IsPointer; EXPECT_TRUE(v);
        v=pppStlArray.IsPointer; EXPECT_TRUE(v);
        v=pppVector.IsPointer; EXPECT_TRUE(v);
        v=pppDeque.IsPointer; EXPECT_TRUE(v);
        v=pppForwardList.IsPointer; EXPECT_TRUE(v);
        v=pppList.IsPointer; EXPECT_TRUE(v);
        v=pppStack.IsPointer; EXPECT_TRUE(v);
        v=pppQueue.IsPointer; EXPECT_TRUE(v);
        v=pppPriorityQueue.IsPointer; EXPECT_TRUE(v);
        v=pppSet.IsPointer; EXPECT_TRUE(v);
        v=pppMultiSet.IsPointer; EXPECT_TRUE(v);
        v=pppUnorderedSet.IsPointer; EXPECT_TRUE(v);
        v=pppUnorderedMultiSet.IsPointer; EXPECT_TRUE(v);

        v=ppaStlArray.IsPointer; EXPECT_TRUE(v);
        v=ppaVector.IsPointer; EXPECT_TRUE(v);
        v=ppaDeque.IsPointer; EXPECT_TRUE(v);
        v=ppaForwardList.IsPointer; EXPECT_TRUE(v);
        v=ppaList.IsPointer; EXPECT_TRUE(v);
        v=ppaSet.IsPointer; EXPECT_TRUE(v);
        v=ppaMultiSet.IsPointer; EXPECT_TRUE(v);
        v=ppaMap.IsPointer; EXPECT_TRUE(v);
        v=ppaMultiMap.IsPointer; EXPECT_TRUE(v);
        v=ppaUnorderedMap.IsPointer; EXPECT_TRUE(v);
        v=ppaUnorderedMultimap.IsPointer; EXPECT_TRUE(v);

        v=pppaStlArray.IsPointer; EXPECT_TRUE(v);
        v=pppaVector.IsPointer; EXPECT_TRUE(v);
        v=pppaDeque.IsPointer; EXPECT_TRUE(v);
        v=pppaForwardList.IsPointer; EXPECT_TRUE(v);
        v=pppaList.IsPointer; EXPECT_TRUE(v);
        v=pppaSet.IsPointer; EXPECT_TRUE(v);
        v=pppaMultiSet.IsPointer; EXPECT_TRUE(v);
        v=pppaMap.IsPointer; EXPECT_TRUE(v);
        v=pppaMultiMap.IsPointer; EXPECT_TRUE(v);
        v=pppaUnorderedMap.IsPointer; EXPECT_TRUE(v);
        v=pppaUnorderedMultimap.IsPointer; EXPECT_TRUE(v);

        v=poArray.IsPointer; EXPECT_TRUE(v);
        v=poStlArray.IsPointer; EXPECT_TRUE(v);
        v=poVector.IsPointer; EXPECT_TRUE(v);
        v=poDeque.IsPointer; EXPECT_TRUE(v);
        v=poForwardList.IsPointer; EXPECT_TRUE(v);
        v=poList.IsPointer; EXPECT_TRUE(v);
        v=poStack.IsPointer; EXPECT_TRUE(v);
        v=poQueue.IsPointer; EXPECT_TRUE(v);
        v=poPriorityQueue.IsPointer; EXPECT_TRUE(v);
        v=poSet.IsPointer; EXPECT_TRUE(v);
        v=poMultiSet.IsPointer; EXPECT_TRUE(v);
        v=poUnorderedSet.IsPointer; EXPECT_TRUE(v);
        v=poUnorderedMultiSet.IsPointer; EXPECT_TRUE(v);

        v=popArray.IsPointer; EXPECT_TRUE(v);
        v=popStlArray.IsPointer; EXPECT_TRUE(v);
        v=popVector.IsPointer; EXPECT_TRUE(v);
        v=popDeque.IsPointer; EXPECT_TRUE(v);
        v=popForwardList.IsPointer; EXPECT_TRUE(v);
        v=popList.IsPointer; EXPECT_TRUE(v);
        v=popStack.IsPointer; EXPECT_TRUE(v);
        v=popQueue.IsPointer; EXPECT_TRUE(v);
        v=popPriorityQueue.IsPointer; EXPECT_TRUE(v);
        v=popSet.IsPointer; EXPECT_TRUE(v);
        v=popMultiSet.IsPointer; EXPECT_TRUE(v);
        v=popUnorderedSet.IsPointer; EXPECT_TRUE(v);
        v=popUnorderedMultiSet.IsPointer; EXPECT_TRUE(v);

        v=poaStlArray.IsPointer; EXPECT_TRUE(v);
        v=poaVector.IsPointer; EXPECT_TRUE(v);
        v=poaDeque.IsPointer; EXPECT_TRUE(v);
        v=poaForwardList.IsPointer; EXPECT_TRUE(v);
        v=poaList.IsPointer; EXPECT_TRUE(v);
        v=poaSet.IsPointer; EXPECT_TRUE(v);
        v=poaMultiSet.IsPointer; EXPECT_TRUE(v);
        v=poaMap.IsPointer; EXPECT_TRUE(v);
        v=poaMultiMap.IsPointer; EXPECT_TRUE(v);
        v=poaUnorderedMap.IsPointer; EXPECT_TRUE(v);
        v=poaUnorderedMultimap.IsPointer; EXPECT_TRUE(v);

        v=popaStlArray.IsPointer; EXPECT_TRUE(v);
        v=popaVector.IsPointer; EXPECT_TRUE(v);
        v=popaDeque.IsPointer; EXPECT_TRUE(v);
        v=popaForwardList.IsPointer; EXPECT_TRUE(v);
        v=popaList.IsPointer; EXPECT_TRUE(v);
        v=popaSet.IsPointer; EXPECT_TRUE(v);
        v=popaMultiSet.IsPointer; EXPECT_TRUE(v);
        v=popaMap.IsPointer; EXPECT_TRUE(v);
        v=popaMultiMap.IsPointer; EXPECT_TRUE(v);
        v=popaUnorderedMap.IsPointer; EXPECT_TRUE(v);
        v=popaUnorderedMultimap.IsPointer; EXPECT_TRUE(v);
    }
    
    TEST(FieldAggregationsTest, IfNull)
    {
        EXPECT_FALSE(primitive.IsNull(primitiveVal));
        
        decltype(primitivePointer)::type primitivePointerNullPointer = nullptr; decltype(primitivePointer)::type primitivePointerValidPointer = (decltype(primitivePointer)::type)validPointer; EXPECT_TRUE(primitivePointer.IsNull(primitivePointerNullPointer)); EXPECT_FALSE(primitivePointer.IsNull(primitivePointerValidPointer));

        EXPECT_FALSE(object.IsNull(objectVal));
        
        decltype(objectPointer)::type objectPointerNullPointer = nullptr;
        decltype(objectPointer)::type objectPointerPointerValidPointer = (decltype(objectPointer)::type)validPointer;
        EXPECT_TRUE(objectPointer.IsNull(objectPointerNullPointer));
        EXPECT_FALSE(objectPointer.IsNull(objectPointerPointerValidPointer));


        EXPECT_FALSE(ipArray.IsNull(ipArrayVal));
        EXPECT_FALSE(ipStlArray.IsNull(ipStlArrayVal));
        EXPECT_FALSE(ipVector.IsNull(ipVectorVal));
        EXPECT_FALSE(ipDeque.IsNull(ipDequeVal));
        EXPECT_FALSE(ipForwardList.IsNull(ipForwardListVal));
        EXPECT_FALSE(ipList.IsNull(ipListVal));
        EXPECT_FALSE(ipStack.IsNull(ipStackVal));
        EXPECT_FALSE(ipQueue.IsNull(ipQueueVal));
        EXPECT_FALSE(ipPriorityQueue.IsNull(ipPriorityQueueVal));
        EXPECT_FALSE(ipSet.IsNull(ipSetVal));
        EXPECT_FALSE(ipMultiSet.IsNull(ipMultiSetVal));
        EXPECT_FALSE(ipUnorderedSet.IsNull(ipUnorderedSetVal));
        EXPECT_FALSE(ipUnorderedMultiSet.IsNull(ipUnorderedMultiSetVal));

        EXPECT_FALSE(ippArray.IsNull(ippArrayVal));
        EXPECT_FALSE(ippStlArray.IsNull(ippStlArrayVal));
        EXPECT_FALSE(ippVector.IsNull(ippVectorVal));
        EXPECT_FALSE(ippDeque.IsNull(ippDequeVal));
        EXPECT_FALSE(ippForwardList.IsNull(ippForwardListVal));
        EXPECT_FALSE(ippList.IsNull(ippListVal));
        EXPECT_FALSE(ippStack.IsNull(ippStackVal));
        EXPECT_FALSE(ippQueue.IsNull(ippQueueVal));
        EXPECT_FALSE(ippPriorityQueue.IsNull(ippPriorityQueueVal));
        EXPECT_FALSE(ippSet.IsNull(ippSetVal));
        EXPECT_FALSE(ippMultiSet.IsNull(ippMultiSetVal));
        EXPECT_FALSE(ippUnorderedSet.IsNull(ippUnorderedSetVal));
        EXPECT_FALSE(ippUnorderedMultiSet.IsNull(ippUnorderedMultiSetVal));

        EXPECT_FALSE(ipaStlArray.IsNull(ipaStlArrayVal));
        EXPECT_FALSE(ipaVector.IsNull(ipaVectorVal));
        EXPECT_FALSE(ipaDeque.IsNull(ipaDequeVal));
        EXPECT_FALSE(ipaForwardList.IsNull(ipaForwardListVal));
        EXPECT_FALSE(ipaList.IsNull(ipaListVal));
        EXPECT_FALSE(ipaSet.IsNull(ipaSetVal));
        EXPECT_FALSE(ipaMultiSet.IsNull(ipaMultiSetVal));
        EXPECT_FALSE(ipaMap.IsNull(ipaMapVal));
        EXPECT_FALSE(ipaMultiMap.IsNull(ipaMultiMapVal));
        EXPECT_FALSE(ipaUnorderedMap.IsNull(ipaUnorderedMapVal));
        EXPECT_FALSE(ipaUnorderedMultimap.IsNull(ipaUnorderedMultimapVal));

        EXPECT_FALSE(ippaStlArray.IsNull(ippaStlArrayVal));
        EXPECT_FALSE(ippaVector.IsNull(ippaVectorVal));
        EXPECT_FALSE(ippaDeque.IsNull(ippaDequeVal));
        EXPECT_FALSE(ippaForwardList.IsNull(ippaForwardListVal));
        EXPECT_FALSE(ippaList.IsNull(ippaListVal));
        EXPECT_FALSE(ippaSet.IsNull(ippaSetVal));
        EXPECT_FALSE(ippaMultiSet.IsNull(ippaMultiSetVal));
        EXPECT_FALSE(ippaMap.IsNull(ippaMapVal));
        EXPECT_FALSE(ippaMultiMap.IsNull(ippaMultiMapVal));
        EXPECT_FALSE(ippaUnorderedMap.IsNull(ippaUnorderedMapVal));
        EXPECT_FALSE(ippaUnorderedMultimap.IsNull(ippaUnorderedMultimapVal));

        EXPECT_FALSE(ioArray.IsNull(ioArrayVal));
        EXPECT_FALSE(ioStlArray.IsNull(ioStlArrayVal));
        EXPECT_FALSE(ioVector.IsNull(ioVectorVal));
        EXPECT_FALSE(ioDeque.IsNull(ioDequeVal));
        EXPECT_FALSE(ioForwardList.IsNull(ioForwardListVal));
        EXPECT_FALSE(ioList.IsNull(ioListVal));
        EXPECT_FALSE(ioStack.IsNull(ioStackVal));
        EXPECT_FALSE(ioQueue.IsNull(ioQueueVal));
        EXPECT_FALSE(ioPriorityQueue.IsNull(ioPriorityQueueVal));
        EXPECT_FALSE(ioSet.IsNull(ioSetVal));
        EXPECT_FALSE(ioMultiSet.IsNull(ioMultiSetVal));
        EXPECT_FALSE(ioUnorderedSet.IsNull(ioUnorderedSetVal));
        EXPECT_FALSE(ioUnorderedMultiSet.IsNull(ioUnorderedMultiSetVal));

        EXPECT_FALSE(iopArray.IsNull(iopArrayVal));
        EXPECT_FALSE(iopStlArray.IsNull(iopStlArrayVal));
        EXPECT_FALSE(iopVector.IsNull(iopVectorVal));
        EXPECT_FALSE(iopDeque.IsNull(iopDequeVal));
        EXPECT_FALSE(iopForwardList.IsNull(iopForwardListVal));
        EXPECT_FALSE(iopList.IsNull(iopListVal));
        EXPECT_FALSE(iopStack.IsNull(iopStackVal));
        EXPECT_FALSE(iopQueue.IsNull(iopQueueVal));
        EXPECT_FALSE(iopPriorityQueue.IsNull(iopPriorityQueueVal));
        EXPECT_FALSE(iopSet.IsNull(iopSetVal));
        EXPECT_FALSE(iopMultiSet.IsNull(iopMultiSetVal));
        EXPECT_FALSE(iopUnorderedSet.IsNull(iopUnorderedSetVal));
        EXPECT_FALSE(iopUnorderedMultiSet.IsNull(iopUnorderedMultiSetVal));

        EXPECT_FALSE(ioaStlArray.IsNull(ioaStlArrayVal));
        EXPECT_FALSE(ioaVector.IsNull(ioaVectorVal));
        EXPECT_FALSE(ioaDeque.IsNull(ioaDequeVal));
        EXPECT_FALSE(ioaForwardList.IsNull(ioaForwardListVal));
        EXPECT_FALSE(ioaList.IsNull(ioaListVal));
        EXPECT_FALSE(ioaSet.IsNull(ioaSetVal));
        EXPECT_FALSE(ioaMultiSet.IsNull(ioaMultiSetVal));
        EXPECT_FALSE(ioaMap.IsNull(ioaMapVal));
        EXPECT_FALSE(ioaMultiMap.IsNull(ioaMultiMapVal));
        EXPECT_FALSE(ioaUnorderedMap.IsNull(ioaUnorderedMapVal));
        EXPECT_FALSE(ioaUnorderedMultimap.IsNull(ioaUnorderedMultimapVal));

        EXPECT_FALSE(iopaStlArray.IsNull(iopaStlArrayVal));
        EXPECT_FALSE(iopaVector.IsNull(iopaVectorVal));
        EXPECT_FALSE(iopaDeque.IsNull(iopaDequeVal));
        EXPECT_FALSE(iopaForwardList.IsNull(iopaForwardListVal));
        EXPECT_FALSE(iopaList.IsNull(iopaListVal));
        EXPECT_FALSE(iopaSet.IsNull(iopaSetVal));
        EXPECT_FALSE(iopaMultiSet.IsNull(iopaMultiSetVal));
        EXPECT_FALSE(iopaMap.IsNull(iopaMapVal));
        EXPECT_FALSE(iopaMultiMap.IsNull(iopaMultiMapVal));
        EXPECT_FALSE(iopaUnorderedMap.IsNull(iopaUnorderedMapVal));
        EXPECT_FALSE(iopaUnorderedMultimap.IsNull(iopaUnorderedMultimapVal));
        
        decltype(ppArray)::type ppArrayNullPointer = nullptr;
        decltype(ppArray)::type ppArrayValidPointer = (decltype(ppArray)::type)validPointer;
        EXPECT_TRUE(ppArray.IsNull(ppArrayNullPointer));
        EXPECT_FALSE(ppArray.IsNull(ppArrayValidPointer));
        decltype(ppStlArray)::type ppStlArrayNullPointer = nullptr;
        decltype(ppStlArray)::type ppStlArrayValidPointer = (decltype(ppStlArray)::type)validPointer;
        EXPECT_TRUE(ppStlArray.IsNull(ppStlArrayNullPointer));
        EXPECT_FALSE(ppStlArray.IsNull(ppStlArrayValidPointer));
        decltype(ppVector)::type ppVectorNullPointer = nullptr;
        decltype(ppVector)::type ppVectorValidPointer = (decltype(ppVector)::type)validPointer;
        EXPECT_TRUE(ppVector.IsNull(ppVectorNullPointer));
        EXPECT_FALSE(ppVector.IsNull(ppVectorValidPointer));
        decltype(ppDeque)::type ppDequeNullPointer = nullptr;
        decltype(ppDeque)::type ppDequeValidPointer = (decltype(ppDeque)::type)validPointer;
        EXPECT_TRUE(ppDeque.IsNull(ppDequeNullPointer));
        EXPECT_FALSE(ppDeque.IsNull(ppDequeValidPointer));
        decltype(ppForwardList)::type ppForwardListNullPointer = nullptr;
        decltype(ppForwardList)::type ppForwardListValidPointer = (decltype(ppForwardList)::type)validPointer;
        EXPECT_TRUE(ppForwardList.IsNull(ppForwardListNullPointer));
        EXPECT_FALSE(ppForwardList.IsNull(ppForwardListValidPointer));
        decltype(ppList)::type ppListNullPointer = nullptr;
        decltype(ppList)::type ppListValidPointer = (decltype(ppList)::type)validPointer;
        EXPECT_TRUE(ppList.IsNull(ppListNullPointer));
        EXPECT_FALSE(ppList.IsNull(ppListValidPointer));
        decltype(ppStack)::type ppStackNullPointer = nullptr;
        decltype(ppStack)::type ppStackValidPointer = (decltype(ppStack)::type)validPointer;
        EXPECT_TRUE(ppStack.IsNull(ppStackNullPointer));
        EXPECT_FALSE(ppStack.IsNull(ppStackValidPointer));
        decltype(ppQueue)::type ppQueueNullPointer = nullptr;
        decltype(ppQueue)::type ppQueueValidPointer = (decltype(ppQueue)::type)validPointer;
        EXPECT_TRUE(ppQueue.IsNull(ppQueueNullPointer));
        EXPECT_FALSE(ppQueue.IsNull(ppQueueValidPointer));
        decltype(ppPriorityQueue)::type ppPriorityQueueNullPointer = nullptr;
        decltype(ppPriorityQueue)::type ppPriorityQueueValidPointer = (decltype(ppPriorityQueue)::type)validPointer;
        EXPECT_TRUE(ppPriorityQueue.IsNull(ppPriorityQueueNullPointer));
        EXPECT_FALSE(ppPriorityQueue.IsNull(ppPriorityQueueValidPointer));
        decltype(ppSet)::type ppSetNullPointer = nullptr;
        decltype(ppSet)::type ppSetValidPointer = (decltype(ppSet)::type)validPointer;
        EXPECT_TRUE(ppSet.IsNull(ppSetNullPointer));
        EXPECT_FALSE(ppSet.IsNull(ppSetValidPointer));
        decltype(ppMultiSet)::type ppMultiSetNullPointer = nullptr;
        decltype(ppMultiSet)::type ppMultiSetValidPointer = (decltype(ppMultiSet)::type)validPointer;
        EXPECT_TRUE(ppMultiSet.IsNull(ppMultiSetNullPointer));
        EXPECT_FALSE(ppMultiSet.IsNull(ppMultiSetValidPointer));
        decltype(ppUnorderedSet)::type ppUnorderedSetNullPointer = nullptr;
        decltype(ppUnorderedSet)::type ppUnorderedSetValidPointer = (decltype(ppUnorderedSet)::type)validPointer;
        EXPECT_TRUE(ppUnorderedSet.IsNull(ppUnorderedSetNullPointer));
        EXPECT_FALSE(ppUnorderedSet.IsNull(ppUnorderedSetValidPointer));
        decltype(ppUnorderedMultiSet)::type ppUnorderedMultiSetNullPointer = nullptr;
        decltype(ppUnorderedMultiSet)::type ppUnorderedMultiSetValidPointer = (decltype(ppUnorderedMultiSet)::type)validPointer;
        EXPECT_TRUE(ppUnorderedMultiSet.IsNull(ppUnorderedMultiSetNullPointer));
        EXPECT_FALSE(ppUnorderedMultiSet.IsNull(ppUnorderedMultiSetValidPointer));

        decltype(pppArray)::type pppArrayNullPointer = nullptr;
        decltype(pppArray)::type pppArrayValidPointer = (decltype(pppArray)::type)validPointer;
        EXPECT_TRUE(pppArray.IsNull(pppArrayNullPointer));
        EXPECT_FALSE(pppArray.IsNull(pppArrayValidPointer));
        decltype(pppStlArray)::type pppStlArrayNullPointer = nullptr;
        decltype(pppStlArray)::type pppStlArrayValidPointer = (decltype(pppStlArray)::type)validPointer;
        EXPECT_TRUE(pppStlArray.IsNull(pppStlArrayNullPointer));
        EXPECT_FALSE(pppStlArray.IsNull(pppStlArrayValidPointer));
        decltype(pppVector)::type pppVectorNullPointer = nullptr;
        decltype(pppVector)::type pppVectorValidPointer = (decltype(pppVector)::type)validPointer;
        EXPECT_TRUE(pppVector.IsNull(pppVectorNullPointer));
        EXPECT_FALSE(pppVector.IsNull(pppVectorValidPointer));
        decltype(pppDeque)::type pppDequeNullPointer = nullptr;
        decltype(pppDeque)::type pppDequeValidPointer = (decltype(pppDeque)::type)validPointer;
        EXPECT_TRUE(pppDeque.IsNull(pppDequeNullPointer));
        EXPECT_FALSE(pppDeque.IsNull(pppDequeValidPointer));
        decltype(pppForwardList)::type pppForwardListNullPointer = nullptr;
        decltype(pppForwardList)::type pppForwardListValidPointer = (decltype(pppForwardList)::type)validPointer;
        EXPECT_TRUE(pppForwardList.IsNull(pppForwardListNullPointer));
        EXPECT_FALSE(pppForwardList.IsNull(pppForwardListValidPointer));
        decltype(pppList)::type pppListNullPointer = nullptr;
        decltype(pppList)::type pppListValidPointer = (decltype(pppList)::type)validPointer;
        EXPECT_TRUE(pppList.IsNull(pppListNullPointer));
        EXPECT_FALSE(pppList.IsNull(pppListValidPointer));
        decltype(pppStack)::type pppStackNullPointer = nullptr;
        decltype(pppStack)::type pppStackValidPointer = (decltype(pppStack)::type)validPointer;
        EXPECT_TRUE(pppStack.IsNull(pppStackNullPointer));
        EXPECT_FALSE(pppStack.IsNull(pppStackValidPointer));
        decltype(pppQueue)::type pppQueueNullPointer = nullptr;
        decltype(pppQueue)::type pppQueueValidPointer = (decltype(pppQueue)::type)validPointer;
        EXPECT_TRUE(pppQueue.IsNull(pppQueueNullPointer));
        EXPECT_FALSE(pppQueue.IsNull(pppQueueValidPointer));
        decltype(pppPriorityQueue)::type pppPriorityQueueNullPointer = nullptr;
        decltype(pppPriorityQueue)::type pppPriorityQueueValidPointer = (decltype(pppPriorityQueue)::type)validPointer;
        EXPECT_TRUE(pppPriorityQueue.IsNull(pppPriorityQueueNullPointer));
        EXPECT_FALSE(pppPriorityQueue.IsNull(pppPriorityQueueValidPointer));
        decltype(pppSet)::type pppSetNullPointer = nullptr;
        decltype(pppSet)::type pppSetValidPointer = (decltype(pppSet)::type)validPointer;
        EXPECT_TRUE(pppSet.IsNull(pppSetNullPointer));
        EXPECT_FALSE(pppSet.IsNull(pppSetValidPointer));
        decltype(pppMultiSet)::type pppMultiSetNullPointer = nullptr;
        decltype(pppMultiSet)::type pppMultiSetValidPointer = (decltype(pppMultiSet)::type)validPointer;
        EXPECT_TRUE(pppMultiSet.IsNull(pppMultiSetNullPointer));
        EXPECT_FALSE(pppMultiSet.IsNull(pppMultiSetValidPointer));
        decltype(pppUnorderedSet)::type pppUnorderedSetNullPointer = nullptr;
        decltype(pppUnorderedSet)::type pppUnorderedSetValidPointer = (decltype(pppUnorderedSet)::type)validPointer;
        EXPECT_TRUE(pppUnorderedSet.IsNull(pppUnorderedSetNullPointer));
        EXPECT_FALSE(pppUnorderedSet.IsNull(pppUnorderedSetValidPointer));
        decltype(pppUnorderedMultiSet)::type pppUnorderedMultiSetNullPointer = nullptr;
        decltype(pppUnorderedMultiSet)::type pppUnorderedMultiSetValidPointer = (decltype(pppUnorderedMultiSet)::type)validPointer;
        EXPECT_TRUE(pppUnorderedMultiSet.IsNull(pppUnorderedMultiSetNullPointer));
        EXPECT_FALSE(pppUnorderedMultiSet.IsNull(pppUnorderedMultiSetValidPointer));

        decltype(ppaStlArray)::type ppaStlArrayNullPointer = nullptr;
        decltype(ppaStlArray)::type ppaStlArrayValidPointer = (decltype(ppaStlArray)::type)validPointer;
        EXPECT_TRUE(ppaStlArray.IsNull(ppaStlArrayNullPointer));
        EXPECT_FALSE(ppaStlArray.IsNull(ppaStlArrayValidPointer));
        decltype(ppaVector)::type ppaVectorNullPointer = nullptr;
        decltype(ppaVector)::type ppaVectorValidPointer = (decltype(ppaVector)::type)validPointer;
        EXPECT_TRUE(ppaVector.IsNull(ppaVectorNullPointer));
        EXPECT_FALSE(ppaVector.IsNull(ppaVectorValidPointer));
        decltype(ppaDeque)::type ppaDequeNullPointer = nullptr;
        decltype(ppaDeque)::type ppaDequeValidPointer = (decltype(ppaDeque)::type)validPointer;
        EXPECT_TRUE(ppaDeque.IsNull(ppaDequeNullPointer));
        EXPECT_FALSE(ppaDeque.IsNull(ppaDequeValidPointer));
        decltype(ppaForwardList)::type ppaForwardListNullPointer = nullptr;
        decltype(ppaForwardList)::type ppaForwardListValidPointer = (decltype(ppaForwardList)::type)validPointer;
        EXPECT_TRUE(ppaForwardList.IsNull(ppaForwardListNullPointer));
        EXPECT_FALSE(ppaForwardList.IsNull(ppaForwardListValidPointer));
        decltype(ppaList)::type ppaListNullPointer = nullptr;
        decltype(ppaList)::type ppaListValidPointer = (decltype(ppaList)::type)validPointer;
        EXPECT_TRUE(ppaList.IsNull(ppaListNullPointer));
        EXPECT_FALSE(ppaList.IsNull(ppaListValidPointer));
        decltype(ppaSet)::type ppaSetNullPointer = nullptr;
        decltype(ppaSet)::type ppaSetValidPointer = (decltype(ppaSet)::type)validPointer;
        EXPECT_TRUE(ppaSet.IsNull(ppaSetNullPointer));
        EXPECT_FALSE(ppaSet.IsNull(ppaSetValidPointer));
        decltype(ppaMultiSet)::type ppaMultiSetNullPointer = nullptr;
        decltype(ppaMultiSet)::type ppaMultiSetValidPointer = (decltype(ppaMultiSet)::type)validPointer;
        EXPECT_TRUE(ppaMultiSet.IsNull(ppaMultiSetNullPointer));
        EXPECT_FALSE(ppaMultiSet.IsNull(ppaMultiSetValidPointer));
        decltype(ppaMap)::type ppaMapNullPointer = nullptr;
        decltype(ppaMap)::type ppaMapValidPointer = (decltype(ppaMap)::type)validPointer;
        EXPECT_TRUE(ppaMap.IsNull(ppaMapNullPointer));
        EXPECT_FALSE(ppaMap.IsNull(ppaMapValidPointer));
        decltype(ppaMultiMap)::type ppaMultiMapNullPointer = nullptr;
        decltype(ppaMultiMap)::type ppaMultiMapValidPointer = (decltype(ppaMultiMap)::type)validPointer;
        EXPECT_TRUE(ppaMultiMap.IsNull(ppaMultiMapNullPointer));
        EXPECT_FALSE(ppaMultiMap.IsNull(ppaMultiMapValidPointer));
        decltype(ppaUnorderedMap)::type ppaUnorderedMapNullPointer = nullptr;
        decltype(ppaUnorderedMap)::type ppaUnorderedMapValidPointer = (decltype(ppaUnorderedMap)::type)validPointer;
        EXPECT_TRUE(ppaUnorderedMap.IsNull(ppaUnorderedMapNullPointer));
        EXPECT_FALSE(ppaUnorderedMap.IsNull(ppaUnorderedMapValidPointer));
        decltype(ppaUnorderedMultimap)::type ppaUnorderedMultimapNullPointer = nullptr;
        decltype(ppaUnorderedMultimap)::type ppaUnorderedMultimapValidPointer = (decltype(ppaUnorderedMultimap)::type)validPointer;
        EXPECT_TRUE(ppaUnorderedMultimap.IsNull(ppaUnorderedMultimapNullPointer));
        EXPECT_FALSE(ppaUnorderedMultimap.IsNull(ppaUnorderedMultimapValidPointer));

        decltype(pppaStlArray)::type pppaStlArrayNullPointer = nullptr;
        decltype(pppaStlArray)::type pppaStlArrayValidPointer = (decltype(pppaStlArray)::type)validPointer;
        EXPECT_TRUE(pppaStlArray.IsNull(pppaStlArrayNullPointer));
        EXPECT_FALSE(pppaStlArray.IsNull(pppaStlArrayValidPointer));
        decltype(pppaVector)::type pppaVectorNullPointer = nullptr;
        decltype(pppaVector)::type pppaVectorValidPointer = (decltype(pppaVector)::type)validPointer;
        EXPECT_TRUE(pppaVector.IsNull(pppaVectorNullPointer));
        EXPECT_FALSE(pppaVector.IsNull(pppaVectorValidPointer));
        decltype(pppaDeque)::type pppaDequeNullPointer = nullptr;
        decltype(pppaDeque)::type pppaDequeValidPointer = (decltype(pppaDeque)::type)validPointer;
        EXPECT_TRUE(pppaDeque.IsNull(pppaDequeNullPointer));
        EXPECT_FALSE(pppaDeque.IsNull(pppaDequeValidPointer));
        decltype(pppaForwardList)::type pppaForwardListNullPointer = nullptr;
        decltype(pppaForwardList)::type pppaForwardListValidPointer = (decltype(pppaForwardList)::type)validPointer;
        EXPECT_TRUE(pppaForwardList.IsNull(pppaForwardListNullPointer));
        EXPECT_FALSE(pppaForwardList.IsNull(pppaForwardListValidPointer));
        decltype(pppaList)::type pppaListNullPointer = nullptr;
        decltype(pppaList)::type pppaListValidPointer = (decltype(pppaList)::type)validPointer;
        EXPECT_TRUE(pppaList.IsNull(pppaListNullPointer));
        EXPECT_FALSE(pppaList.IsNull(pppaListValidPointer));
        decltype(pppaSet)::type pppaSetNullPointer = nullptr;
        decltype(pppaSet)::type pppaSetValidPointer = (decltype(pppaSet)::type)validPointer;
        EXPECT_TRUE(pppaSet.IsNull(pppaSetNullPointer));
        EXPECT_FALSE(pppaSet.IsNull(pppaSetValidPointer));
        decltype(pppaMultiSet)::type pppaMultiSetNullPointer = nullptr;
        decltype(pppaMultiSet)::type pppaMultiSetValidPointer = (decltype(pppaMultiSet)::type)validPointer;
        EXPECT_TRUE(pppaMultiSet.IsNull(pppaMultiSetNullPointer));
        EXPECT_FALSE(pppaMultiSet.IsNull(pppaMultiSetValidPointer));
        decltype(pppaMap)::type pppaMapNullPointer = nullptr;
        decltype(pppaMap)::type pppaMapValidPointer = (decltype(pppaMap)::type)validPointer;
        EXPECT_TRUE(pppaMap.IsNull(pppaMapNullPointer));
        EXPECT_FALSE(pppaMap.IsNull(pppaMapValidPointer));
        decltype(pppaMultiMap)::type pppaMultiMapNullPointer = nullptr;
        decltype(pppaMultiMap)::type pppaMultiMapValidPointer = (decltype(pppaMultiMap)::type)validPointer;
        EXPECT_TRUE(pppaMultiMap.IsNull(pppaMultiMapNullPointer));
        EXPECT_FALSE(pppaMultiMap.IsNull(pppaMultiMapValidPointer));
        decltype(pppaUnorderedMap)::type pppaUnorderedMapNullPointer = nullptr;
        decltype(pppaUnorderedMap)::type pppaUnorderedMapValidPointer = (decltype(pppaUnorderedMap)::type)validPointer;
        EXPECT_TRUE(pppaUnorderedMap.IsNull(pppaUnorderedMapNullPointer));
        EXPECT_FALSE(pppaUnorderedMap.IsNull(pppaUnorderedMapValidPointer));
        decltype(pppaUnorderedMultimap)::type pppaUnorderedMultimapNullPointer = nullptr;
        decltype(pppaUnorderedMultimap)::type pppaUnorderedMultimapValidPointer = (decltype(pppaUnorderedMultimap)::type)validPointer;
        EXPECT_TRUE(pppaUnorderedMultimap.IsNull(pppaUnorderedMultimapNullPointer));
        EXPECT_FALSE(pppaUnorderedMultimap.IsNull(pppaUnorderedMultimapValidPointer));

        decltype(poArray)::type poArrayNullPointer = nullptr;
        decltype(poArray)::type poArrayValidPointer = (decltype(poArray)::type)validPointer;
        EXPECT_TRUE(poArray.IsNull(poArrayNullPointer));
        EXPECT_FALSE(poArray.IsNull(poArrayValidPointer));
        decltype(poStlArray)::type poStlArrayNullPointer = nullptr;
        decltype(poStlArray)::type poStlArrayValidPointer = (decltype(poStlArray)::type)validPointer;
        EXPECT_TRUE(poStlArray.IsNull(poStlArrayNullPointer));
        EXPECT_FALSE(poStlArray.IsNull(poStlArrayValidPointer));
        decltype(poVector)::type poVectorNullPointer = nullptr;
        decltype(poVector)::type poVectorValidPointer = (decltype(poVector)::type)validPointer;
        EXPECT_TRUE(poVector.IsNull(poVectorNullPointer));
        EXPECT_FALSE(poVector.IsNull(poVectorValidPointer));
        decltype(poDeque)::type poDequeNullPointer = nullptr;
        decltype(poDeque)::type poDequeValidPointer = (decltype(poDeque)::type)validPointer;
        EXPECT_TRUE(poDeque.IsNull(poDequeNullPointer));
        EXPECT_FALSE(poDeque.IsNull(poDequeValidPointer));
        decltype(poForwardList)::type poForwardListNullPointer = nullptr;
        decltype(poForwardList)::type poForwardListValidPointer = (decltype(poForwardList)::type)validPointer;
        EXPECT_TRUE(poForwardList.IsNull(poForwardListNullPointer));
        EXPECT_FALSE(poForwardList.IsNull(poForwardListValidPointer));
        decltype(poList)::type poListNullPointer = nullptr;
        decltype(poList)::type poListValidPointer = (decltype(poList)::type)validPointer;
        EXPECT_TRUE(poList.IsNull(poListNullPointer));
        EXPECT_FALSE(poList.IsNull(poListValidPointer));
        decltype(poStack)::type poStackNullPointer = nullptr;
        decltype(poStack)::type poStackValidPointer = (decltype(poStack)::type)validPointer;
        EXPECT_TRUE(poStack.IsNull(poStackNullPointer));
        EXPECT_FALSE(poStack.IsNull(poStackValidPointer));
        decltype(poQueue)::type poQueueNullPointer = nullptr;
        decltype(poQueue)::type poQueueValidPointer = (decltype(poQueue)::type)validPointer;
        EXPECT_TRUE(poQueue.IsNull(poQueueNullPointer));
        EXPECT_FALSE(poQueue.IsNull(poQueueValidPointer));
        decltype(poPriorityQueue)::type poPriorityQueueNullPointer = nullptr;
        decltype(poPriorityQueue)::type poPriorityQueueValidPointer = (decltype(poPriorityQueue)::type)validPointer;
        EXPECT_TRUE(poPriorityQueue.IsNull(poPriorityQueueNullPointer));
        EXPECT_FALSE(poPriorityQueue.IsNull(poPriorityQueueValidPointer));
        decltype(poSet)::type poSetNullPointer = nullptr;
        decltype(poSet)::type poSetValidPointer = (decltype(poSet)::type)validPointer;
        EXPECT_TRUE(poSet.IsNull(poSetNullPointer));
        EXPECT_FALSE(poSet.IsNull(poSetValidPointer));
        decltype(poMultiSet)::type poMultiSetNullPointer = nullptr;
        decltype(poMultiSet)::type poMultiSetValidPointer = (decltype(poMultiSet)::type)validPointer;
        EXPECT_TRUE(poMultiSet.IsNull(poMultiSetNullPointer));
        EXPECT_FALSE(poMultiSet.IsNull(poMultiSetValidPointer));
        decltype(poUnorderedSet)::type poUnorderedSetNullPointer = nullptr;
        decltype(poUnorderedSet)::type poUnorderedSetValidPointer = (decltype(poUnorderedSet)::type)validPointer;
        EXPECT_TRUE(poUnorderedSet.IsNull(poUnorderedSetNullPointer));
        EXPECT_FALSE(poUnorderedSet.IsNull(poUnorderedSetValidPointer));
        decltype(poUnorderedMultiSet)::type poUnorderedMultiSetNullPointer = nullptr;
        decltype(poUnorderedMultiSet)::type poUnorderedMultiSetValidPointer = (decltype(poUnorderedMultiSet)::type)validPointer;
        EXPECT_TRUE(poUnorderedMultiSet.IsNull(poUnorderedMultiSetNullPointer));
        EXPECT_FALSE(poUnorderedMultiSet.IsNull(poUnorderedMultiSetValidPointer));

        decltype(popArray)::type popArrayNullPointer = nullptr;
        decltype(popArray)::type popArrayValidPointer = (decltype(popArray)::type)validPointer;
        EXPECT_TRUE(popArray.IsNull(popArrayNullPointer));
        EXPECT_FALSE(popArray.IsNull(popArrayValidPointer));
        decltype(popStlArray)::type popStlArrayNullPointer = nullptr;
        decltype(popStlArray)::type popStlArrayValidPointer = (decltype(popStlArray)::type)validPointer;
        EXPECT_TRUE(popStlArray.IsNull(popStlArrayNullPointer));
        EXPECT_FALSE(popStlArray.IsNull(popStlArrayValidPointer));
        decltype(popVector)::type popVectorNullPointer = nullptr;
        decltype(popVector)::type popVectorValidPointer = (decltype(popVector)::type)validPointer;
        EXPECT_TRUE(popVector.IsNull(popVectorNullPointer));
        EXPECT_FALSE(popVector.IsNull(popVectorValidPointer));
        decltype(popDeque)::type popDequeNullPointer = nullptr;
        decltype(popDeque)::type popDequeValidPointer = (decltype(popDeque)::type)validPointer;
        EXPECT_TRUE(popDeque.IsNull(popDequeNullPointer));
        EXPECT_FALSE(popDeque.IsNull(popDequeValidPointer));
        decltype(popForwardList)::type popForwardListNullPointer = nullptr;
        decltype(popForwardList)::type popForwardListValidPointer = (decltype(popForwardList)::type)validPointer;
        EXPECT_TRUE(popForwardList.IsNull(popForwardListNullPointer));
        EXPECT_FALSE(popForwardList.IsNull(popForwardListValidPointer));
        decltype(popList)::type popListNullPointer = nullptr;
        decltype(popList)::type popListValidPointer = (decltype(popList)::type)validPointer;
        EXPECT_TRUE(popList.IsNull(popListNullPointer));
        EXPECT_FALSE(popList.IsNull(popListValidPointer));
        decltype(popStack)::type popStackNullPointer = nullptr;
        decltype(popStack)::type popStackValidPointer = (decltype(popStack)::type)validPointer;
        EXPECT_TRUE(popStack.IsNull(popStackNullPointer));
        EXPECT_FALSE(popStack.IsNull(popStackValidPointer));
        decltype(popQueue)::type popQueueNullPointer = nullptr;
        decltype(popQueue)::type popQueueValidPointer = (decltype(popQueue)::type)validPointer;
        EXPECT_TRUE(popQueue.IsNull(popQueueNullPointer));
        EXPECT_FALSE(popQueue.IsNull(popQueueValidPointer));
        decltype(popPriorityQueue)::type popPriorityQueueNullPointer = nullptr;
        decltype(popPriorityQueue)::type popPriorityQueueValidPointer = (decltype(popPriorityQueue)::type)validPointer;
        EXPECT_TRUE(popPriorityQueue.IsNull(popPriorityQueueNullPointer));
        EXPECT_FALSE(popPriorityQueue.IsNull(popPriorityQueueValidPointer));
        decltype(popSet)::type popSetNullPointer = nullptr;
        decltype(popSet)::type popSetValidPointer = (decltype(popSet)::type)validPointer;
        EXPECT_TRUE(popSet.IsNull(popSetNullPointer));
        EXPECT_FALSE(popSet.IsNull(popSetValidPointer));
        decltype(popMultiSet)::type popMultiSetNullPointer = nullptr;
        decltype(popMultiSet)::type popMultiSetValidPointer = (decltype(popMultiSet)::type)validPointer;
        EXPECT_TRUE(popMultiSet.IsNull(popMultiSetNullPointer));
        EXPECT_FALSE(popMultiSet.IsNull(popMultiSetValidPointer));
        decltype(popUnorderedSet)::type popUnorderedSetNullPointer = nullptr;
        decltype(popUnorderedSet)::type popUnorderedSetValidPointer = (decltype(popUnorderedSet)::type)validPointer;
        EXPECT_TRUE(popUnorderedSet.IsNull(popUnorderedSetNullPointer));
        EXPECT_FALSE(popUnorderedSet.IsNull(popUnorderedSetValidPointer));
        decltype(popUnorderedMultiSet)::type popUnorderedMultiSetNullPointer = nullptr;
        decltype(popUnorderedMultiSet)::type popUnorderedMultiSetValidPointer = (decltype(popUnorderedMultiSet)::type)validPointer;
        EXPECT_TRUE(popUnorderedMultiSet.IsNull(popUnorderedMultiSetNullPointer));
        EXPECT_FALSE(popUnorderedMultiSet.IsNull(popUnorderedMultiSetValidPointer));

        decltype(poaStlArray)::type poaStlArrayNullPointer = nullptr;
        decltype(poaStlArray)::type poaStlArrayValidPointer = (decltype(poaStlArray)::type)validPointer;
        EXPECT_TRUE(poaStlArray.IsNull(poaStlArrayNullPointer));
        EXPECT_FALSE(poaStlArray.IsNull(poaStlArrayValidPointer));
        decltype(poaVector)::type poaVectorNullPointer = nullptr;
        decltype(poaVector)::type poaVectorValidPointer = (decltype(poaVector)::type)validPointer;
        EXPECT_TRUE(poaVector.IsNull(poaVectorNullPointer));
        EXPECT_FALSE(poaVector.IsNull(poaVectorValidPointer));
        decltype(poaDeque)::type poaDequeNullPointer = nullptr;
        decltype(poaDeque)::type poaDequeValidPointer = (decltype(poaDeque)::type)validPointer;
        EXPECT_TRUE(poaDeque.IsNull(poaDequeNullPointer));
        EXPECT_FALSE(poaDeque.IsNull(poaDequeValidPointer));
        decltype(poaForwardList)::type poaForwardListNullPointer = nullptr;
        decltype(poaForwardList)::type poaForwardListValidPointer = (decltype(poaForwardList)::type)validPointer;
        EXPECT_TRUE(poaForwardList.IsNull(poaForwardListNullPointer));
        EXPECT_FALSE(poaForwardList.IsNull(poaForwardListValidPointer));
        decltype(poaList)::type poaListNullPointer = nullptr;
        decltype(poaList)::type poaListValidPointer = (decltype(poaList)::type)validPointer;
        EXPECT_TRUE(poaList.IsNull(poaListNullPointer));
        EXPECT_FALSE(poaList.IsNull(poaListValidPointer));
        decltype(poaSet)::type poaSetNullPointer = nullptr;
        decltype(poaSet)::type poaSetValidPointer = (decltype(poaSet)::type)validPointer;
        EXPECT_TRUE(poaSet.IsNull(poaSetNullPointer));
        EXPECT_FALSE(poaSet.IsNull(poaSetValidPointer));
        decltype(poaMultiSet)::type poaMultiSetNullPointer = nullptr;
        decltype(poaMultiSet)::type poaMultiSetValidPointer = (decltype(poaMultiSet)::type)validPointer;
        EXPECT_TRUE(poaMultiSet.IsNull(poaMultiSetNullPointer));
        EXPECT_FALSE(poaMultiSet.IsNull(poaMultiSetValidPointer));
        decltype(poaMap)::type poaMapNullPointer = nullptr;
        decltype(poaMap)::type poaMapValidPointer = (decltype(poaMap)::type)validPointer;
        EXPECT_TRUE(poaMap.IsNull(poaMapNullPointer));
        EXPECT_FALSE(poaMap.IsNull(poaMapValidPointer));
        decltype(poaMultiMap)::type poaMultiMapNullPointer = nullptr;
        decltype(poaMultiMap)::type poaMultiMapValidPointer = (decltype(poaMultiMap)::type)validPointer;
        EXPECT_TRUE(poaMultiMap.IsNull(poaMultiMapNullPointer));
        EXPECT_FALSE(poaMultiMap.IsNull(poaMultiMapValidPointer));
        decltype(poaUnorderedMap)::type poaUnorderedMapNullPointer = nullptr;
        decltype(poaUnorderedMap)::type poaUnorderedMapValidPointer = (decltype(poaUnorderedMap)::type)validPointer;
        EXPECT_TRUE(poaUnorderedMap.IsNull(poaUnorderedMapNullPointer));
        EXPECT_FALSE(poaUnorderedMap.IsNull(poaUnorderedMapValidPointer));
        decltype(poaUnorderedMultimap)::type poaUnorderedMultimapNullPointer = nullptr;
        decltype(poaUnorderedMultimap)::type poaUnorderedMultimapValidPointer = (decltype(poaUnorderedMultimap)::type)validPointer;
        EXPECT_TRUE(poaUnorderedMultimap.IsNull(poaUnorderedMultimapNullPointer));
        EXPECT_FALSE(poaUnorderedMultimap.IsNull(poaUnorderedMultimapValidPointer));

        decltype(popaStlArray)::type popaStlArrayNullPointer = nullptr;
        decltype(popaStlArray)::type popaStlArrayValidPointer = (decltype(popaStlArray)::type)validPointer;
        EXPECT_TRUE(popaStlArray.IsNull(popaStlArrayNullPointer));
        EXPECT_FALSE(popaStlArray.IsNull(popaStlArrayValidPointer));
        decltype(popaVector)::type popaVectorNullPointer = nullptr;
        decltype(popaVector)::type popaVectorValidPointer = (decltype(popaVector)::type)validPointer;
        EXPECT_TRUE(popaVector.IsNull(popaVectorNullPointer));
        EXPECT_FALSE(popaVector.IsNull(popaVectorValidPointer));
        decltype(popaDeque)::type popaDequeNullPointer = nullptr;
        decltype(popaDeque)::type popaDequeValidPointer = (decltype(popaDeque)::type)validPointer;
        EXPECT_TRUE(popaDeque.IsNull(popaDequeNullPointer));
        EXPECT_FALSE(popaDeque.IsNull(popaDequeValidPointer));
        decltype(popaForwardList)::type popaForwardListNullPointer = nullptr;
        decltype(popaForwardList)::type popaForwardListValidPointer = (decltype(popaForwardList)::type)validPointer;
        EXPECT_TRUE(popaForwardList.IsNull(popaForwardListNullPointer));
        EXPECT_FALSE(popaForwardList.IsNull(popaForwardListValidPointer));
        decltype(popaList)::type popaListNullPointer = nullptr;
        decltype(popaList)::type popaListValidPointer = (decltype(popaList)::type)validPointer;
        EXPECT_TRUE(popaList.IsNull(popaListNullPointer));
        EXPECT_FALSE(popaList.IsNull(popaListValidPointer));
        decltype(popaSet)::type popaSetNullPointer = nullptr;
        decltype(popaSet)::type popaSetValidPointer = (decltype(popaSet)::type)validPointer;
        EXPECT_TRUE(popaSet.IsNull(popaSetNullPointer));
        EXPECT_FALSE(popaSet.IsNull(popaSetValidPointer));
        decltype(popaMultiSet)::type popaMultiSetNullPointer = nullptr;
        decltype(popaMultiSet)::type popaMultiSetValidPointer = (decltype(popaMultiSet)::type)validPointer;
        EXPECT_TRUE(popaMultiSet.IsNull(popaMultiSetNullPointer));
        EXPECT_FALSE(popaMultiSet.IsNull(popaMultiSetValidPointer));
        decltype(popaMap)::type popaMapNullPointer = nullptr;
        decltype(popaMap)::type popaMapValidPointer = (decltype(popaMap)::type)validPointer;
        EXPECT_TRUE(popaMap.IsNull(popaMapNullPointer));
        EXPECT_FALSE(popaMap.IsNull(popaMapValidPointer));
        decltype(popaMultiMap)::type popaMultiMapNullPointer = nullptr;
        decltype(popaMultiMap)::type popaMultiMapValidPointer = (decltype(popaMultiMap)::type)validPointer;
        EXPECT_TRUE(popaMultiMap.IsNull(popaMultiMapNullPointer));
        EXPECT_FALSE(popaMultiMap.IsNull(popaMultiMapValidPointer));
        decltype(popaUnorderedMap)::type popaUnorderedMapNullPointer = nullptr;
        decltype(popaUnorderedMap)::type popaUnorderedMapValidPointer = (decltype(popaUnorderedMap)::type)validPointer;
        EXPECT_TRUE(popaUnorderedMap.IsNull(popaUnorderedMapNullPointer));
        EXPECT_FALSE(popaUnorderedMap.IsNull(popaUnorderedMapValidPointer));
        decltype(popaUnorderedMultimap)::type popaUnorderedMultimapNullPointer = nullptr;
        decltype(popaUnorderedMultimap)::type popaUnorderedMultimapValidPointer = (decltype(popaUnorderedMultimap)::type)validPointer;
        EXPECT_TRUE(popaUnorderedMultimap.IsNull(popaUnorderedMultimapNullPointer));
        EXPECT_FALSE(popaUnorderedMultimap.IsNull(popaUnorderedMultimapValidPointer));
    }

    TEST(FieldAggregationsTest, Singular)
    {
        EXPECT_TRUE(primitive.IsPrimitive);
        EXPECT_FALSE(primitive.IsPrimitivePointer);
        EXPECT_FALSE(primitive.IsObject);
        EXPECT_FALSE(primitive.IsObjectPointer);
        EXPECT_FALSE(primitive.IsPrimitiveArray);
        EXPECT_FALSE(primitive.IsPrimitiveArrayPointer);
        EXPECT_FALSE(primitive.IsIterablePrimitives);
        EXPECT_FALSE(primitive.IsIterablePrimitivesPointer);
        EXPECT_FALSE(primitive.IsPrimitiveAdaptor);
        EXPECT_FALSE(primitive.IsPrimitiveAdaptorPointer);
        EXPECT_FALSE(primitive.IsPrimitivePointerArray);
        EXPECT_FALSE(primitive.IsPrimitivePointerArrayPointer);
        EXPECT_FALSE(primitive.IsIterablePrimitivePointers);
        EXPECT_FALSE(primitive.IsIterablePrimitivePointersPointer);
        EXPECT_FALSE(primitive.IsPrimitivePointerAdaptor);
        EXPECT_FALSE(primitive.IsPrimitivePointerAdaptorPointer);
        EXPECT_FALSE(primitive.IsObjectArray);
        EXPECT_FALSE(primitive.IsObjectArrayPointer);
        EXPECT_FALSE(primitive.IsIterableObjects);
        EXPECT_FALSE(primitive.IsIterableObjectsPointer);
        EXPECT_FALSE(primitive.IsObjectAdaptor);
        EXPECT_FALSE(primitive.IsObjectAdaptorPointer);
        EXPECT_FALSE(primitive.IsObjectPointerArray);
        EXPECT_FALSE(primitive.IsObjectPointerArrayPointer);
        EXPECT_FALSE(primitive.IsIterableObjectPointers);
        EXPECT_FALSE(primitive.IsIterableObjectPointersPointer);
        EXPECT_FALSE(primitive.IsObjectPointerAdaptor);
        EXPECT_FALSE(primitive.IsObjectPointerAdaptorPointer);
        EXPECT_FALSE(primitive.IsIterablePrimitivePairs);
        EXPECT_FALSE(primitive.IsIterablePrimitivePairsPointer);
        EXPECT_FALSE(primitive.IsIterablePrimitivePointerPairs);
        EXPECT_FALSE(primitive.IsIterablePrimitivePointerPairsPointer);
        EXPECT_FALSE(primitive.IsIterableObjectPairs);
        EXPECT_FALSE(primitive.IsIterableObjectPairsPointer);
        EXPECT_FALSE(primitive.IsIterableObjectPointerPairs);
        EXPECT_FALSE(primitive.IsIterableObjectPointerPairsPointer);

        EXPECT_FALSE(primitivePointer.IsPrimitive);
        EXPECT_TRUE(primitivePointer.IsPrimitivePointer);
        EXPECT_FALSE(primitivePointer.IsObject);
        EXPECT_FALSE(primitivePointer.IsObjectPointer);
        EXPECT_FALSE(primitivePointer.IsPrimitiveArray);
        EXPECT_FALSE(primitivePointer.IsPrimitiveArrayPointer);
        EXPECT_FALSE(primitivePointer.IsIterablePrimitives);
        EXPECT_FALSE(primitivePointer.IsIterablePrimitivesPointer);
        EXPECT_FALSE(primitivePointer.IsPrimitiveAdaptor);
        EXPECT_FALSE(primitivePointer.IsPrimitiveAdaptorPointer);
        EXPECT_FALSE(primitivePointer.IsPrimitivePointerArray);
        EXPECT_FALSE(primitivePointer.IsPrimitivePointerArrayPointer);
        EXPECT_FALSE(primitivePointer.IsIterablePrimitivePointers);
        EXPECT_FALSE(primitivePointer.IsIterablePrimitivePointersPointer);
        EXPECT_FALSE(primitivePointer.IsPrimitivePointerAdaptor);
        EXPECT_FALSE(primitivePointer.IsPrimitivePointerAdaptorPointer);
        EXPECT_FALSE(primitivePointer.IsObjectArray);
        EXPECT_FALSE(primitivePointer.IsObjectArrayPointer);
        EXPECT_FALSE(primitivePointer.IsIterableObjects);
        EXPECT_FALSE(primitivePointer.IsIterableObjectsPointer);
        EXPECT_FALSE(primitivePointer.IsObjectAdaptor);
        EXPECT_FALSE(primitivePointer.IsObjectAdaptorPointer);
        EXPECT_FALSE(primitivePointer.IsObjectPointerArray);
        EXPECT_FALSE(primitivePointer.IsObjectPointerArrayPointer);
        EXPECT_FALSE(primitivePointer.IsIterableObjectPointers);
        EXPECT_FALSE(primitivePointer.IsIterableObjectPointersPointer);
        EXPECT_FALSE(primitivePointer.IsObjectPointerAdaptor);
        EXPECT_FALSE(primitivePointer.IsObjectPointerAdaptorPointer);
        EXPECT_FALSE(primitivePointer.IsIterablePrimitivePairs);
        EXPECT_FALSE(primitivePointer.IsIterablePrimitivePairsPointer);
        EXPECT_FALSE(primitivePointer.IsIterablePrimitivePointerPairs);
        EXPECT_FALSE(primitivePointer.IsIterablePrimitivePointerPairsPointer);
        EXPECT_FALSE(primitivePointer.IsIterableObjectPairs);
        EXPECT_FALSE(primitivePointer.IsIterableObjectPairsPointer);
        EXPECT_FALSE(primitivePointer.IsIterableObjectPointerPairs);
        EXPECT_FALSE(primitivePointer.IsIterableObjectPointerPairsPointer);

        EXPECT_FALSE(object.IsPrimitive);
        EXPECT_FALSE(object.IsPrimitivePointer);
        EXPECT_TRUE(object.IsObject);
        EXPECT_FALSE(object.IsObjectPointer);
        EXPECT_FALSE(object.IsPrimitiveArray);
        EXPECT_FALSE(object.IsPrimitiveArrayPointer);
        EXPECT_FALSE(object.IsIterablePrimitives);
        EXPECT_FALSE(object.IsIterablePrimitivesPointer);
        EXPECT_FALSE(object.IsPrimitiveAdaptor);
        EXPECT_FALSE(object.IsPrimitiveAdaptorPointer);
        EXPECT_FALSE(object.IsPrimitivePointerArray);
        EXPECT_FALSE(object.IsPrimitivePointerArrayPointer);
        EXPECT_FALSE(object.IsIterablePrimitivePointers);
        EXPECT_FALSE(object.IsIterablePrimitivePointersPointer);
        EXPECT_FALSE(object.IsPrimitivePointerAdaptor);
        EXPECT_FALSE(object.IsPrimitivePointerAdaptorPointer);
        EXPECT_FALSE(object.IsObjectArray);
        EXPECT_FALSE(object.IsObjectArrayPointer);
        EXPECT_FALSE(object.IsIterableObjects);
        EXPECT_FALSE(object.IsIterableObjectsPointer);
        EXPECT_FALSE(object.IsObjectAdaptor);
        EXPECT_FALSE(object.IsObjectAdaptorPointer);
        EXPECT_FALSE(object.IsObjectPointerArray);
        EXPECT_FALSE(object.IsObjectPointerArrayPointer);
        EXPECT_FALSE(object.IsIterableObjectPointers);
        EXPECT_FALSE(object.IsIterableObjectPointersPointer);
        EXPECT_FALSE(object.IsObjectPointerAdaptor);
        EXPECT_FALSE(object.IsObjectPointerAdaptorPointer);
        EXPECT_FALSE(object.IsIterablePrimitivePairs);
        EXPECT_FALSE(object.IsIterablePrimitivePairsPointer);
        EXPECT_FALSE(object.IsIterablePrimitivePointerPairs);
        EXPECT_FALSE(object.IsIterablePrimitivePointerPairsPointer);
        EXPECT_FALSE(object.IsIterableObjectPairs);
        EXPECT_FALSE(object.IsIterableObjectPairsPointer);
        EXPECT_FALSE(object.IsIterableObjectPointerPairs);
        EXPECT_FALSE(object.IsIterableObjectPointerPairsPointer);

        EXPECT_FALSE(objectPointer.IsPrimitive);
        EXPECT_FALSE(objectPointer.IsPrimitivePointer);
        EXPECT_FALSE(objectPointer.IsObject);
        EXPECT_TRUE(objectPointer.IsObjectPointer);
        EXPECT_FALSE(objectPointer.IsPrimitiveArray);
        EXPECT_FALSE(objectPointer.IsPrimitiveArrayPointer);
        EXPECT_FALSE(objectPointer.IsIterablePrimitives);
        EXPECT_FALSE(objectPointer.IsIterablePrimitivesPointer);
        EXPECT_FALSE(objectPointer.IsPrimitiveAdaptor);
        EXPECT_FALSE(objectPointer.IsPrimitiveAdaptorPointer);
        EXPECT_FALSE(objectPointer.IsPrimitivePointerArray);
        EXPECT_FALSE(objectPointer.IsPrimitivePointerArrayPointer);
        EXPECT_FALSE(objectPointer.IsIterablePrimitivePointers);
        EXPECT_FALSE(objectPointer.IsIterablePrimitivePointersPointer);
        EXPECT_FALSE(objectPointer.IsPrimitivePointerAdaptor);
        EXPECT_FALSE(objectPointer.IsPrimitivePointerAdaptorPointer);
        EXPECT_FALSE(objectPointer.IsObjectArray);
        EXPECT_FALSE(objectPointer.IsObjectArrayPointer);
        EXPECT_FALSE(objectPointer.IsIterableObjects);
        EXPECT_FALSE(objectPointer.IsIterableObjectsPointer);
        EXPECT_FALSE(objectPointer.IsObjectAdaptor);
        EXPECT_FALSE(objectPointer.IsObjectAdaptorPointer);
        EXPECT_FALSE(objectPointer.IsObjectPointerArray);
        EXPECT_FALSE(objectPointer.IsObjectPointerArrayPointer);
        EXPECT_FALSE(objectPointer.IsIterableObjectPointers);
        EXPECT_FALSE(objectPointer.IsIterableObjectPointersPointer);
        EXPECT_FALSE(objectPointer.IsObjectPointerAdaptor);
        EXPECT_FALSE(objectPointer.IsObjectPointerAdaptorPointer);
        EXPECT_FALSE(objectPointer.IsIterablePrimitivePairs);
        EXPECT_FALSE(objectPointer.IsIterablePrimitivePairsPointer);
        EXPECT_FALSE(objectPointer.IsIterablePrimitivePointerPairs);
        EXPECT_FALSE(objectPointer.IsIterablePrimitivePointerPairsPointer);
        EXPECT_FALSE(objectPointer.IsIterableObjectPairs);
        EXPECT_FALSE(objectPointer.IsIterableObjectPairsPointer);
        EXPECT_FALSE(objectPointer.IsIterableObjectPointerPairs);
        EXPECT_FALSE(objectPointer.IsIterableObjectPointerPairsPointer);
    }
    
};
