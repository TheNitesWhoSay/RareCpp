#include "LambdaGuardTest.h"

namespace FieldLambdaGuards
{
    PrimitiveField primitive;
    PrimitivePointerField primitivePointer;

    ObjectField object;
    ObjectPointerField objectPointer;

    IP_Array ipArray;
    IP_StlArray ipStlArray;
    IP_Vector ipVector;
    IP_Deque ipDeque;
    IP_ForwardList ipForwardList;
    IP_List ipList;
    IP_Stack ipStack;
    IP_Queue ipQueue;
    IP_PriorityQueue ipPriorityQueue;
    IP_Set ipSet;
    IP_MultiSet ipMultiSet;
    IP_UnorderedSet ipUnorderedSet;
    IP_UnorderedMultiSet ipUnorderedMultiSet;

    IPP_Array ippArray;
    IPP_StlArray ippStlArray;
    IPP_Vector ippVector;
    IPP_Deque ippDeque;
    IPP_ForwardList ippForwardList;
    IPP_List ippList;
    IPP_Stack ippStack;
    IPP_Queue ippQueue;
    IPP_PriorityQueue ippPriorityQueue;
    IPP_Set ippSet;
    IPP_MultiSet ippMultiSet;
    IPP_UnorderedSet ippUnorderedSet;
    IPP_UnorderedMultiSet ippUnorderedMultiSet;

    IPA_Array ipaArray;
    IPA_StlArray ipaStlArray;
    IPA_Vector ipaVector;
    IPA_Deque ipaDeque;
    IPA_ForwardList ipaForwardList;
    IPA_List ipaList;
    IPA_Set ipaSet;
    IPA_MultiSet ipaMultiSet;
    IPA_Map ipaMap;
    IPA_MultiMap ipaMultiMap;
    IPA_UnorderedMap ipaUnorderedMap;
    IPA_UnorderedMultimap ipaUnorderedMultimap;

    IPPA_Array ippaArray;
    IPPA_StlArray ippaStlArray;
    IPPA_Vector ippaVector;
    IPPA_Deque ippaDeque;
    IPPA_ForwardList ippaForwardList;
    IPPA_List ippaList;
    IPPA_Set ippaSet;
    IPPA_MultiSet ippaMultiSet;
    IPPA_Map ippaMap;
    IPPA_MultiMap ippaMultiMap;
    IPPA_UnorderedMap ippaUnorderedMap;
    IPPA_UnorderedMultimap ippaUnorderedMultimap;

    IO_Array ioArray;
    IO_StlArray ioStlArray;
    IO_Vector ioVector;
    IO_Deque ioDeque;
    IO_ForwardList ioForwardList;
    IO_List ioList;
    IO_Stack ioStack;
    IO_Queue ioQueue;
    IO_PriorityQueue ioPriorityQueue;
    IO_Set ioSet;
    IO_MultiSet ioMultiSet;
    IO_UnorderedSet ioUnorderedSet;
    IO_UnorderedMultiSet ioUnorderedMultiSet;

    IOP_Array iopArray;
    IOP_StlArray iopStlArray;
    IOP_Vector iopVector;
    IOP_Deque iopDeque;
    IOP_ForwardList iopForwardList;
    IOP_List iopList;
    IOP_Stack iopStack;
    IOP_Queue iopQueue;
    IOP_PriorityQueue iopPriorityQueue;
    IOP_Set iopSet;
    IOP_MultiSet iopMultiSet;
    IOP_UnorderedSet iopUnorderedSet;
    IOP_UnorderedMultiSet iopUnorderedMultiSet;

    IOA_Array ioaArray;
    IOA_StlArray ioaStlArray;
    IOA_Vector ioaVector;
    IOA_Deque ioaDeque;
    IOA_ForwardList ioaForwardList;
    IOA_List ioaList;
    IOA_Set ioaSet;
    IOA_MultiSet ioaMultiSet;
    IOA_Map ioaMap;
    IOA_MultiMap ioaMultiMap;
    IOA_UnorderedMap ioaUnorderedMap;
    IOA_UnorderedMultimap ioaUnorderedMultimap;

    IOPA_Array iopaArray;
    IOPA_StlArray iopaStlArray;
    IOPA_Vector iopaVector;
    IOPA_Deque iopaDeque;
    IOPA_ForwardList iopaForwardList;
    IOPA_List iopaList;
    IOPA_Set iopaSet;
    IOPA_MultiSet iopaMultiSet;
    IOPA_Map iopaMap;
    IOPA_MultiMap iopaMultiMap;
    IOPA_UnorderedMap iopaUnorderedMap;
    IOPA_UnorderedMultimap iopaUnorderedMultimap;



    PP_Array ppArray;
    PP_StlArray ppStlArray;
    PP_Vector ppVector;
    PP_Deque ppDeque;
    PP_ForwardList ppForwardList;
    PP_List ppList;
    PP_Stack ppStack;
    PP_Queue ppQueue;
    PP_PriorityQueue ppPriorityQueue;
    PP_Set ppSet;
    PP_MultiSet ppMultiSet;
    PP_UnorderedSet ppUnorderedSet;
    PP_UnorderedMultiSet ppUnorderedMultiSet;

    PPP_Array pppArray;
    PPP_StlArray pppStlArray;
    PPP_Vector pppVector;
    PPP_Deque pppDeque;
    PPP_ForwardList pppForwardList;
    PPP_List pppList;
    PPP_Stack pppStack;
    PPP_Queue pppQueue;
    PPP_PriorityQueue pppPriorityQueue;
    PPP_Set pppSet;
    PPP_MultiSet pppMultiSet;
    PPP_UnorderedSet pppUnorderedSet;
    PPP_UnorderedMultiSet pppUnorderedMultiSet;

    PPA_Array ppaArray;
    PPA_StlArray ppaStlArray;
    PPA_Vector ppaVector;
    PPA_Deque ppaDeque;
    PPA_ForwardList ppaForwardList;
    PPA_List ppaList;
    PPA_Set ppaSet;
    PPA_MultiSet ppaMultiSet;
    PPA_Map ppaMap;
    PPA_MultiMap ppaMultiMap;
    PPA_UnorderedMap ppaUnorderedMap;
    PPA_UnorderedMultimap ppaUnorderedMultimap;

    PPPA_Array pppaArray;
    PPPA_StlArray pppaStlArray;
    PPPA_Vector pppaVector;
    PPPA_Deque pppaDeque;
    PPPA_ForwardList pppaForwardList;
    PPPA_List pppaList;
    PPPA_Set pppaSet;
    PPPA_MultiSet pppaMultiSet;
    PPPA_Map pppaMap;
    PPPA_MultiMap pppaMultiMap;
    PPPA_UnorderedMap pppaUnorderedMap;
    PPPA_UnorderedMultimap pppaUnorderedMultimap;

    PO_Array poArray;
    PO_StlArray poStlArray;
    PO_Vector poVector;
    PO_Deque poDeque;
    PO_ForwardList poForwardList;
    PO_List poList;
    PO_Stack poStack;
    PO_Queue poQueue;
    PO_PriorityQueue poPriorityQueue;
    PO_Set poSet;
    PO_MultiSet poMultiSet;
    PO_UnorderedSet poUnorderedSet;
    PO_UnorderedMultiSet poUnorderedMultiSet;

    POP_Array popArray;
    POP_StlArray popStlArray;
    POP_Vector popVector;
    POP_Deque popDeque;
    POP_ForwardList popForwardList;
    POP_List popList;
    POP_Stack popStack;
    POP_Queue popQueue;
    POP_PriorityQueue popPriorityQueue;
    POP_Set popSet;
    POP_MultiSet popMultiSet;
    POP_UnorderedSet popUnorderedSet;
    POP_UnorderedMultiSet popUnorderedMultiSet;

    POA_Array poaArray;
    POA_StlArray poaStlArray;
    POA_Vector poaVector;
    POA_Deque poaDeque;
    POA_ForwardList poaForwardList;
    POA_List poaList;
    POA_Set poaSet;
    POA_MultiSet poaMultiSet;
    POA_Map poaMap;
    POA_MultiMap poaMultiMap;
    POA_UnorderedMap poaUnorderedMap;
    POA_UnorderedMultimap poaUnorderedMultimap;

    POPA_Array popaArray;
    POPA_StlArray popaStlArray;
    POPA_Vector popaVector;
    POPA_Deque popaDeque;
    POPA_ForwardList popaForwardList;
    POPA_List popaList;
    POPA_Set popaSet;
    POPA_MultiSet popaMultiSet;
    POPA_Map popaMap;
    POPA_MultiMap popaMultiMap;
    POPA_UnorderedMap popaUnorderedMap;
    POPA_UnorderedMultimap popaUnorderedMultimap;



    decltype(primitive)::type primitiveVal;

    decltype(primitivePointer)::type primitivePointerVal = nullptr;

    decltype(object)::type objectVal;

    decltype(objectPointer)::type objectPointerVal = nullptr;


    decltype(ipArray)::type ipArrayVal;
    decltype(ipStlArray)::type ipStlArrayVal;
    decltype(ipVector)::type ipVectorVal;
    decltype(ipDeque)::type ipDequeVal;
    decltype(ipForwardList)::type ipForwardListVal;
    decltype(ipList)::type ipListVal;
    decltype(ipStack)::type ipStackVal;
    decltype(ipQueue)::type ipQueueVal;
    decltype(ipPriorityQueue)::type ipPriorityQueueVal;
    decltype(ipSet)::type ipSetVal;
    decltype(ipMultiSet)::type ipMultiSetVal;
    decltype(ipUnorderedSet)::type ipUnorderedSetVal;
    decltype(ipUnorderedMultiSet)::type ipUnorderedMultiSetVal;

    decltype(ippArray)::type ippArrayVal;
    decltype(ippStlArray)::type ippStlArrayVal;
    decltype(ippVector)::type ippVectorVal;
    decltype(ippDeque)::type ippDequeVal;
    decltype(ippForwardList)::type ippForwardListVal;
    decltype(ippList)::type ippListVal;
    decltype(ippStack)::type ippStackVal;
    decltype(ippQueue)::type ippQueueVal;
    decltype(ippPriorityQueue)::type ippPriorityQueueVal;
    decltype(ippSet)::type ippSetVal;
    decltype(ippMultiSet)::type ippMultiSetVal;
    decltype(ippUnorderedSet)::type ippUnorderedSetVal;
    decltype(ippUnorderedMultiSet)::type ippUnorderedMultiSetVal;

    decltype(ipaStlArray)::type ipaStlArrayVal;
    decltype(ipaVector)::type ipaVectorVal;
    decltype(ipaDeque)::type ipaDequeVal;
    decltype(ipaForwardList)::type ipaForwardListVal;
    decltype(ipaList)::type ipaListVal;
    decltype(ipaSet)::type ipaSetVal;
    decltype(ipaMultiSet)::type ipaMultiSetVal;
    decltype(ipaMap)::type ipaMapVal;
    decltype(ipaMultiMap)::type ipaMultiMapVal;
    decltype(ipaUnorderedMap)::type ipaUnorderedMapVal;
    decltype(ipaUnorderedMultimap)::type ipaUnorderedMultimapVal;

    decltype(ippaStlArray)::type ippaStlArrayVal;
    decltype(ippaVector)::type ippaVectorVal;
    decltype(ippaDeque)::type ippaDequeVal;
    decltype(ippaForwardList)::type ippaForwardListVal;
    decltype(ippaList)::type ippaListVal;
    decltype(ippaSet)::type ippaSetVal;
    decltype(ippaMultiSet)::type ippaMultiSetVal;
    decltype(ippaMap)::type ippaMapVal;
    decltype(ippaMultiMap)::type ippaMultiMapVal;
    decltype(ippaUnorderedMap)::type ippaUnorderedMapVal;
    decltype(ippaUnorderedMultimap)::type ippaUnorderedMultimapVal;

    decltype(ioArray)::type ioArrayVal;
    decltype(ioStlArray)::type ioStlArrayVal;
    decltype(ioVector)::type ioVectorVal;
    decltype(ioDeque)::type ioDequeVal;
    decltype(ioForwardList)::type ioForwardListVal;
    decltype(ioList)::type ioListVal;
    decltype(ioStack)::type ioStackVal;
    decltype(ioQueue)::type ioQueueVal;
    decltype(ioPriorityQueue)::type ioPriorityQueueVal;
    decltype(ioSet)::type ioSetVal;
    decltype(ioMultiSet)::type ioMultiSetVal;
    decltype(ioUnorderedSet)::type ioUnorderedSetVal;
    decltype(ioUnorderedMultiSet)::type ioUnorderedMultiSetVal;

    decltype(iopArray)::type iopArrayVal;
    decltype(iopStlArray)::type iopStlArrayVal;
    decltype(iopVector)::type iopVectorVal;
    decltype(iopDeque)::type iopDequeVal;
    decltype(iopForwardList)::type iopForwardListVal;
    decltype(iopList)::type iopListVal;
    decltype(iopStack)::type iopStackVal;
    decltype(iopQueue)::type iopQueueVal;
    decltype(iopPriorityQueue)::type iopPriorityQueueVal;
    decltype(iopSet)::type iopSetVal;
    decltype(iopMultiSet)::type iopMultiSetVal;
    decltype(iopUnorderedSet)::type iopUnorderedSetVal;
    decltype(iopUnorderedMultiSet)::type iopUnorderedMultiSetVal;

    decltype(ioaStlArray)::type ioaStlArrayVal;
    decltype(ioaVector)::type ioaVectorVal;
    decltype(ioaDeque)::type ioaDequeVal;
    decltype(ioaForwardList)::type ioaForwardListVal;
    decltype(ioaList)::type ioaListVal;
    decltype(ioaSet)::type ioaSetVal;
    decltype(ioaMultiSet)::type ioaMultiSetVal;
    decltype(ioaMap)::type ioaMapVal;
    decltype(ioaMultiMap)::type ioaMultiMapVal;
    decltype(ioaUnorderedMap)::type ioaUnorderedMapVal;
    decltype(ioaUnorderedMultimap)::type ioaUnorderedMultimapVal;

    decltype(iopaStlArray)::type iopaStlArrayVal;
    decltype(iopaVector)::type iopaVectorVal;
    decltype(iopaDeque)::type iopaDequeVal;
    decltype(iopaForwardList)::type iopaForwardListVal;
    decltype(iopaList)::type iopaListVal;
    decltype(iopaSet)::type iopaSetVal;
    decltype(iopaMultiSet)::type iopaMultiSetVal;
    decltype(iopaMap)::type iopaMapVal;
    decltype(iopaMultiMap)::type iopaMultiMapVal;
    decltype(iopaUnorderedMap)::type iopaUnorderedMapVal;
    decltype(iopaUnorderedMultimap)::type iopaUnorderedMultimapVal;

    decltype(ppArray)::type ppArrayVal = nullptr;
    decltype(ppStlArray)::type ppStlArrayVal = nullptr;
    decltype(ppVector)::type ppVectorVal = nullptr;
    decltype(ppDeque)::type ppDequeVal = nullptr;
    decltype(ppForwardList)::type ppForwardListVal = nullptr;
    decltype(ppList)::type ppListVal = nullptr;
    decltype(ppStack)::type ppStackVal = nullptr;
    decltype(ppQueue)::type ppQueueVal = nullptr;
    decltype(ppPriorityQueue)::type ppPriorityQueueVal = nullptr;
    decltype(ppSet)::type ppSetVal = nullptr;
    decltype(ppMultiSet)::type ppMultiSetVal = nullptr;
    decltype(ppUnorderedSet)::type ppUnorderedSetVal = nullptr;
    decltype(ppUnorderedMultiSet)::type ppUnorderedMultiSetVal = nullptr;

    decltype(pppArray)::type pppArrayVal = nullptr;
    decltype(pppStlArray)::type pppStlArrayVal = nullptr;
    decltype(pppVector)::type pppVectorVal = nullptr;
    decltype(pppDeque)::type pppDequeVal = nullptr;
    decltype(pppForwardList)::type pppForwardListVal = nullptr;
    decltype(pppList)::type pppListVal = nullptr;
    decltype(pppStack)::type pppStackVal = nullptr;
    decltype(pppQueue)::type pppQueueVal = nullptr;
    decltype(pppPriorityQueue)::type pppPriorityQueueVal = nullptr;
    decltype(pppSet)::type pppSetVal = nullptr;
    decltype(pppMultiSet)::type pppMultiSetVal = nullptr;
    decltype(pppUnorderedSet)::type pppUnorderedSetVal = nullptr;
    decltype(pppUnorderedMultiSet)::type pppUnorderedMultiSetVal = nullptr;

    decltype(ppaStlArray)::type ppaStlArrayVal = nullptr;
    decltype(ppaVector)::type ppaVectorVal = nullptr;
    decltype(ppaDeque)::type ppaDequeVal = nullptr;
    decltype(ppaForwardList)::type ppaForwardListVal = nullptr;
    decltype(ppaList)::type ppaListVal = nullptr;
    decltype(ppaSet)::type ppaSetVal = nullptr;
    decltype(ppaMultiSet)::type ppaMultiSetVal = nullptr;
    decltype(ppaMap)::type ppaMapVal = nullptr;
    decltype(ppaMultiMap)::type ppaMultiMapVal = nullptr;
    decltype(ppaUnorderedMap)::type ppaUnorderedMapVal = nullptr;
    decltype(ppaUnorderedMultimap)::type ppaUnorderedMultimapVal = nullptr;

    decltype(pppaStlArray)::type pppaStlArrayVal = nullptr;
    decltype(pppaVector)::type pppaVectorVal = nullptr;
    decltype(pppaDeque)::type pppaDequeVal = nullptr;
    decltype(pppaForwardList)::type pppaForwardListVal = nullptr;
    decltype(pppaList)::type pppaListVal = nullptr;
    decltype(pppaSet)::type pppaSetVal = nullptr;
    decltype(pppaMultiSet)::type pppaMultiSetVal = nullptr;
    decltype(pppaMap)::type pppaMapVal = nullptr;
    decltype(pppaMultiMap)::type pppaMultiMapVal = nullptr;
    decltype(pppaUnorderedMap)::type pppaUnorderedMapVal = nullptr;
    decltype(pppaUnorderedMultimap)::type pppaUnorderedMultimapVal = nullptr;

    decltype(poArray)::type poArrayVal = nullptr;
    decltype(poStlArray)::type poStlArrayVal = nullptr;
    decltype(poVector)::type poVectorVal = nullptr;
    decltype(poDeque)::type poDequeVal = nullptr;
    decltype(poForwardList)::type poForwardListVal = nullptr;
    decltype(poList)::type poListVal = nullptr;
    decltype(poStack)::type poStackVal = nullptr;
    decltype(poQueue)::type poQueueVal = nullptr;
    decltype(poPriorityQueue)::type poPriorityQueueVal = nullptr;
    decltype(poSet)::type poSetVal = nullptr;
    decltype(poMultiSet)::type poMultiSetVal = nullptr;
    decltype(poUnorderedSet)::type poUnorderedSetVal = nullptr;
    decltype(poUnorderedMultiSet)::type poUnorderedMultiSetVal = nullptr;

    decltype(popArray)::type popArrayVal = nullptr;
    decltype(popStlArray)::type popStlArrayVal = nullptr;
    decltype(popVector)::type popVectorVal = nullptr;
    decltype(popDeque)::type popDequeVal = nullptr;
    decltype(popForwardList)::type popForwardListVal = nullptr;
    decltype(popList)::type popListVal = nullptr;
    decltype(popStack)::type popStackVal = nullptr;
    decltype(popQueue)::type popQueueVal = nullptr;
    decltype(popPriorityQueue)::type popPriorityQueueVal = nullptr;
    decltype(popSet)::type popSetVal = nullptr;
    decltype(popMultiSet)::type popMultiSetVal = nullptr;
    decltype(popUnorderedSet)::type popUnorderedSetVal = nullptr;
    decltype(popUnorderedMultiSet)::type popUnorderedMultiSetVal = nullptr;

    decltype(poaStlArray)::type poaStlArrayVal = nullptr;
    decltype(poaVector)::type poaVectorVal = nullptr;
    decltype(poaDeque)::type poaDequeVal = nullptr;
    decltype(poaForwardList)::type poaForwardListVal = nullptr;
    decltype(poaList)::type poaListVal = nullptr;
    decltype(poaSet)::type poaSetVal = nullptr;
    decltype(poaMultiSet)::type poaMultiSetVal = nullptr;
    decltype(poaMap)::type poaMapVal = nullptr;
    decltype(poaMultiMap)::type poaMultiMapVal = nullptr;
    decltype(poaUnorderedMap)::type poaUnorderedMapVal = nullptr;
    decltype(poaUnorderedMultimap)::type poaUnorderedMultimapVal = nullptr;

    decltype(popaStlArray)::type popaStlArrayVal = nullptr;
    decltype(popaVector)::type popaVectorVal = nullptr;
    decltype(popaDeque)::type popaDequeVal = nullptr;
    decltype(popaForwardList)::type popaForwardListVal = nullptr;
    decltype(popaList)::type popaListVal = nullptr;
    decltype(popaSet)::type popaSetVal = nullptr;
    decltype(popaMultiSet)::type popaMultiSetVal = nullptr;
    decltype(popaMap)::type popaMapVal = nullptr;
    decltype(popaMultiMap)::type popaMultiMapVal = nullptr;
    decltype(popaUnorderedMap)::type popaUnorderedMapVal = nullptr;
    decltype(popaUnorderedMultimap)::type popaUnorderedMultimapVal = nullptr;

    int someInt = 0;
    void* validPointer = &someInt;

    bool v = false; // visited
    std::function<void(int)> f([&](int){v=T;});
    
    TEST(LambdaGuardTest, IfPointer)
    {
        v=F; primitive.IfPointer(f); EXPECT_FALSE(v);

        v=F; primitivePointer.IfPointer(f); EXPECT_TRUE(v);

        v=F; object.IfPointer(f); EXPECT_FALSE(v);

        v=F; objectPointer.IfPointer(f); EXPECT_TRUE(v);


        v=F; ipArray.IfPointer(f); EXPECT_FALSE(v);
        v=F; ipStlArray.IfPointer(f); EXPECT_FALSE(v);
        v=F; ipVector.IfPointer(f); EXPECT_FALSE(v);
        v=F; ipDeque.IfPointer(f); EXPECT_FALSE(v);
        v=F; ipForwardList.IfPointer(f); EXPECT_FALSE(v);
        v=F; ipList.IfPointer(f); EXPECT_FALSE(v);
        v=F; ipStack.IfPointer(f); EXPECT_FALSE(v);
        v=F; ipQueue.IfPointer(f); EXPECT_FALSE(v);
        v=F; ipPriorityQueue.IfPointer(f); EXPECT_FALSE(v);
        v=F; ipSet.IfPointer(f); EXPECT_FALSE(v);
        v=F; ipMultiSet.IfPointer(f); EXPECT_FALSE(v);
        v=F; ipUnorderedSet.IfPointer(f); EXPECT_FALSE(v);
        v=F; ipUnorderedMultiSet.IfPointer(f); EXPECT_FALSE(v);

        v=F; ippArray.IfPointer(f); EXPECT_FALSE(v);
        v=F; ippStlArray.IfPointer(f); EXPECT_FALSE(v);
        v=F; ippVector.IfPointer(f); EXPECT_FALSE(v);
        v=F; ippDeque.IfPointer(f); EXPECT_FALSE(v);
        v=F; ippForwardList.IfPointer(f); EXPECT_FALSE(v);
        v=F; ippList.IfPointer(f); EXPECT_FALSE(v);
        v=F; ippStack.IfPointer(f); EXPECT_FALSE(v);
        v=F; ippQueue.IfPointer(f); EXPECT_FALSE(v);
        v=F; ippPriorityQueue.IfPointer(f); EXPECT_FALSE(v);
        v=F; ippSet.IfPointer(f); EXPECT_FALSE(v);
        v=F; ippMultiSet.IfPointer(f); EXPECT_FALSE(v);
        v=F; ippUnorderedSet.IfPointer(f); EXPECT_FALSE(v);
        v=F; ippUnorderedMultiSet.IfPointer(f); EXPECT_FALSE(v);

        v=F; ipaStlArray.IfPointer(f); EXPECT_FALSE(v);
        v=F; ipaVector.IfPointer(f); EXPECT_FALSE(v);
        v=F; ipaDeque.IfPointer(f); EXPECT_FALSE(v);
        v=F; ipaForwardList.IfPointer(f); EXPECT_FALSE(v);
        v=F; ipaList.IfPointer(f); EXPECT_FALSE(v);
        v=F; ipaSet.IfPointer(f); EXPECT_FALSE(v);
        v=F; ipaMultiSet.IfPointer(f); EXPECT_FALSE(v);
        v=F; ipaMap.IfPointer(f); EXPECT_FALSE(v);
        v=F; ipaMultiMap.IfPointer(f); EXPECT_FALSE(v);
        v=F; ipaUnorderedMap.IfPointer(f); EXPECT_FALSE(v);
        v=F; ipaUnorderedMultimap.IfPointer(f); EXPECT_FALSE(v);

        v=F; ippaStlArray.IfPointer(f); EXPECT_FALSE(v);
        v=F; ippaVector.IfPointer(f); EXPECT_FALSE(v);
        v=F; ippaDeque.IfPointer(f); EXPECT_FALSE(v);
        v=F; ippaForwardList.IfPointer(f); EXPECT_FALSE(v);
        v=F; ippaList.IfPointer(f); EXPECT_FALSE(v);
        v=F; ippaSet.IfPointer(f); EXPECT_FALSE(v);
        v=F; ippaMultiSet.IfPointer(f); EXPECT_FALSE(v);
        v=F; ippaMap.IfPointer(f); EXPECT_FALSE(v);
        v=F; ippaMultiMap.IfPointer(f); EXPECT_FALSE(v);
        v=F; ippaUnorderedMap.IfPointer(f); EXPECT_FALSE(v);
        v=F; ippaUnorderedMultimap.IfPointer(f); EXPECT_FALSE(v);

        v=F; ioArray.IfPointer(f); EXPECT_FALSE(v);
        v=F; ioStlArray.IfPointer(f); EXPECT_FALSE(v);
        v=F; ioVector.IfPointer(f); EXPECT_FALSE(v);
        v=F; ioDeque.IfPointer(f); EXPECT_FALSE(v);
        v=F; ioForwardList.IfPointer(f); EXPECT_FALSE(v);
        v=F; ioList.IfPointer(f); EXPECT_FALSE(v);
        v=F; ioStack.IfPointer(f); EXPECT_FALSE(v);
        v=F; ioQueue.IfPointer(f); EXPECT_FALSE(v);
        v=F; ioPriorityQueue.IfPointer(f); EXPECT_FALSE(v);
        v=F; ioSet.IfPointer(f); EXPECT_FALSE(v);
        v=F; ioMultiSet.IfPointer(f); EXPECT_FALSE(v);
        v=F; ioUnorderedSet.IfPointer(f); EXPECT_FALSE(v);
        v=F; ioUnorderedMultiSet.IfPointer(f); EXPECT_FALSE(v);

        v=F; iopArray.IfPointer(f); EXPECT_FALSE(v);
        v=F; iopStlArray.IfPointer(f); EXPECT_FALSE(v);
        v=F; iopVector.IfPointer(f); EXPECT_FALSE(v);
        v=F; iopDeque.IfPointer(f); EXPECT_FALSE(v);
        v=F; iopForwardList.IfPointer(f); EXPECT_FALSE(v);
        v=F; iopList.IfPointer(f); EXPECT_FALSE(v);
        v=F; iopStack.IfPointer(f); EXPECT_FALSE(v);
        v=F; iopQueue.IfPointer(f); EXPECT_FALSE(v);
        v=F; iopPriorityQueue.IfPointer(f); EXPECT_FALSE(v);
        v=F; iopSet.IfPointer(f); EXPECT_FALSE(v);
        v=F; iopMultiSet.IfPointer(f); EXPECT_FALSE(v);
        v=F; iopUnorderedSet.IfPointer(f); EXPECT_FALSE(v);
        v=F; iopUnorderedMultiSet.IfPointer(f); EXPECT_FALSE(v);

        v=F; ioaStlArray.IfPointer(f); EXPECT_FALSE(v);
        v=F; ioaVector.IfPointer(f); EXPECT_FALSE(v);
        v=F; ioaDeque.IfPointer(f); EXPECT_FALSE(v);
        v=F; ioaForwardList.IfPointer(f); EXPECT_FALSE(v);
        v=F; ioaList.IfPointer(f); EXPECT_FALSE(v);
        v=F; ioaSet.IfPointer(f); EXPECT_FALSE(v);
        v=F; ioaMultiSet.IfPointer(f); EXPECT_FALSE(v);
        v=F; ioaMap.IfPointer(f); EXPECT_FALSE(v);
        v=F; ioaMultiMap.IfPointer(f); EXPECT_FALSE(v);
        v=F; ioaUnorderedMap.IfPointer(f); EXPECT_FALSE(v);
        v=F; ioaUnorderedMultimap.IfPointer(f); EXPECT_FALSE(v);

        v=F; iopaStlArray.IfPointer(f); EXPECT_FALSE(v);
        v=F; iopaVector.IfPointer(f); EXPECT_FALSE(v);
        v=F; iopaDeque.IfPointer(f); EXPECT_FALSE(v);
        v=F; iopaForwardList.IfPointer(f); EXPECT_FALSE(v);
        v=F; iopaList.IfPointer(f); EXPECT_FALSE(v);
        v=F; iopaSet.IfPointer(f); EXPECT_FALSE(v);
        v=F; iopaMultiSet.IfPointer(f); EXPECT_FALSE(v);
        v=F; iopaMap.IfPointer(f); EXPECT_FALSE(v);
        v=F; iopaMultiMap.IfPointer(f); EXPECT_FALSE(v);
        v=F; iopaUnorderedMap.IfPointer(f); EXPECT_FALSE(v);
        v=F; iopaUnorderedMultimap.IfPointer(f); EXPECT_FALSE(v);


        v=F; ppArray.IfPointer(f); EXPECT_TRUE(v);
        v=F; ppStlArray.IfPointer(f); EXPECT_TRUE(v);
        v=F; ppVector.IfPointer(f); EXPECT_TRUE(v);
        v=F; ppDeque.IfPointer(f); EXPECT_TRUE(v);
        v=F; ppForwardList.IfPointer(f); EXPECT_TRUE(v);
        v=F; ppList.IfPointer(f); EXPECT_TRUE(v);
        v=F; ppStack.IfPointer(f); EXPECT_TRUE(v);
        v=F; ppQueue.IfPointer(f); EXPECT_TRUE(v);
        v=F; ppPriorityQueue.IfPointer(f); EXPECT_TRUE(v);
        v=F; ppSet.IfPointer(f); EXPECT_TRUE(v);
        v=F; ppMultiSet.IfPointer(f); EXPECT_TRUE(v);
        v=F; ppUnorderedSet.IfPointer(f); EXPECT_TRUE(v);
        v=F; ppUnorderedMultiSet.IfPointer(f); EXPECT_TRUE(v);

        v=F; pppArray.IfPointer(f); EXPECT_TRUE(v);
        v=F; pppStlArray.IfPointer(f); EXPECT_TRUE(v);
        v=F; pppVector.IfPointer(f); EXPECT_TRUE(v);
        v=F; pppDeque.IfPointer(f); EXPECT_TRUE(v);
        v=F; pppForwardList.IfPointer(f); EXPECT_TRUE(v);
        v=F; pppList.IfPointer(f); EXPECT_TRUE(v);
        v=F; pppStack.IfPointer(f); EXPECT_TRUE(v);
        v=F; pppQueue.IfPointer(f); EXPECT_TRUE(v);
        v=F; pppPriorityQueue.IfPointer(f); EXPECT_TRUE(v);
        v=F; pppSet.IfPointer(f); EXPECT_TRUE(v);
        v=F; pppMultiSet.IfPointer(f); EXPECT_TRUE(v);
        v=F; pppUnorderedSet.IfPointer(f); EXPECT_TRUE(v);
        v=F; pppUnorderedMultiSet.IfPointer(f); EXPECT_TRUE(v);

        v=F; ppaStlArray.IfPointer(f); EXPECT_TRUE(v);
        v=F; ppaVector.IfPointer(f); EXPECT_TRUE(v);
        v=F; ppaDeque.IfPointer(f); EXPECT_TRUE(v);
        v=F; ppaForwardList.IfPointer(f); EXPECT_TRUE(v);
        v=F; ppaList.IfPointer(f); EXPECT_TRUE(v);
        v=F; ppaSet.IfPointer(f); EXPECT_TRUE(v);
        v=F; ppaMultiSet.IfPointer(f); EXPECT_TRUE(v);
        v=F; ppaMap.IfPointer(f); EXPECT_TRUE(v);
        v=F; ppaMultiMap.IfPointer(f); EXPECT_TRUE(v);
        v=F; ppaUnorderedMap.IfPointer(f); EXPECT_TRUE(v);
        v=F; ppaUnorderedMultimap.IfPointer(f); EXPECT_TRUE(v);

        v=F; pppaStlArray.IfPointer(f); EXPECT_TRUE(v);
        v=F; pppaVector.IfPointer(f); EXPECT_TRUE(v);
        v=F; pppaDeque.IfPointer(f); EXPECT_TRUE(v);
        v=F; pppaForwardList.IfPointer(f); EXPECT_TRUE(v);
        v=F; pppaList.IfPointer(f); EXPECT_TRUE(v);
        v=F; pppaSet.IfPointer(f); EXPECT_TRUE(v);
        v=F; pppaMultiSet.IfPointer(f); EXPECT_TRUE(v);
        v=F; pppaMap.IfPointer(f); EXPECT_TRUE(v);
        v=F; pppaMultiMap.IfPointer(f); EXPECT_TRUE(v);
        v=F; pppaUnorderedMap.IfPointer(f); EXPECT_TRUE(v);
        v=F; pppaUnorderedMultimap.IfPointer(f); EXPECT_TRUE(v);

        v=F; poArray.IfPointer(f); EXPECT_TRUE(v);
        v=F; poStlArray.IfPointer(f); EXPECT_TRUE(v);
        v=F; poVector.IfPointer(f); EXPECT_TRUE(v);
        v=F; poDeque.IfPointer(f); EXPECT_TRUE(v);
        v=F; poForwardList.IfPointer(f); EXPECT_TRUE(v);
        v=F; poList.IfPointer(f); EXPECT_TRUE(v);
        v=F; poStack.IfPointer(f); EXPECT_TRUE(v);
        v=F; poQueue.IfPointer(f); EXPECT_TRUE(v);
        v=F; poPriorityQueue.IfPointer(f); EXPECT_TRUE(v);
        v=F; poSet.IfPointer(f); EXPECT_TRUE(v);
        v=F; poMultiSet.IfPointer(f); EXPECT_TRUE(v);
        v=F; poUnorderedSet.IfPointer(f); EXPECT_TRUE(v);
        v=F; poUnorderedMultiSet.IfPointer(f); EXPECT_TRUE(v);

        v=F; popArray.IfPointer(f); EXPECT_TRUE(v);
        v=F; popStlArray.IfPointer(f); EXPECT_TRUE(v);
        v=F; popVector.IfPointer(f); EXPECT_TRUE(v);
        v=F; popDeque.IfPointer(f); EXPECT_TRUE(v);
        v=F; popForwardList.IfPointer(f); EXPECT_TRUE(v);
        v=F; popList.IfPointer(f); EXPECT_TRUE(v);
        v=F; popStack.IfPointer(f); EXPECT_TRUE(v);
        v=F; popQueue.IfPointer(f); EXPECT_TRUE(v);
        v=F; popPriorityQueue.IfPointer(f); EXPECT_TRUE(v);
        v=F; popSet.IfPointer(f); EXPECT_TRUE(v);
        v=F; popMultiSet.IfPointer(f); EXPECT_TRUE(v);
        v=F; popUnorderedSet.IfPointer(f); EXPECT_TRUE(v);
        v=F; popUnorderedMultiSet.IfPointer(f); EXPECT_TRUE(v);

        v=F; poaStlArray.IfPointer(f); EXPECT_TRUE(v);
        v=F; poaVector.IfPointer(f); EXPECT_TRUE(v);
        v=F; poaDeque.IfPointer(f); EXPECT_TRUE(v);
        v=F; poaForwardList.IfPointer(f); EXPECT_TRUE(v);
        v=F; poaList.IfPointer(f); EXPECT_TRUE(v);
        v=F; poaSet.IfPointer(f); EXPECT_TRUE(v);
        v=F; poaMultiSet.IfPointer(f); EXPECT_TRUE(v);
        v=F; poaMap.IfPointer(f); EXPECT_TRUE(v);
        v=F; poaMultiMap.IfPointer(f); EXPECT_TRUE(v);
        v=F; poaUnorderedMap.IfPointer(f); EXPECT_TRUE(v);
        v=F; poaUnorderedMultimap.IfPointer(f); EXPECT_TRUE(v);

        v=F; popaStlArray.IfPointer(f); EXPECT_TRUE(v);
        v=F; popaVector.IfPointer(f); EXPECT_TRUE(v);
        v=F; popaDeque.IfPointer(f); EXPECT_TRUE(v);
        v=F; popaForwardList.IfPointer(f); EXPECT_TRUE(v);
        v=F; popaList.IfPointer(f); EXPECT_TRUE(v);
        v=F; popaSet.IfPointer(f); EXPECT_TRUE(v);
        v=F; popaMultiSet.IfPointer(f); EXPECT_TRUE(v);
        v=F; popaMap.IfPointer(f); EXPECT_TRUE(v);
        v=F; popaMultiMap.IfPointer(f); EXPECT_TRUE(v);
        v=F; popaUnorderedMap.IfPointer(f); EXPECT_TRUE(v);
        v=F; popaUnorderedMultimap.IfPointer(f); EXPECT_TRUE(v);
    }
    
    TEST(LambdaGuardTest, IfNull)
    {
        EXPECT_FALSE(primitive.IfNull(primitiveVal));
        
        decltype(primitivePointer)::type primitivePointerNullPointer = nullptr; decltype(primitivePointer)::type primitivePointerValidPointer = (decltype(primitivePointer)::type)validPointer; EXPECT_TRUE(primitivePointer.IfNull(primitivePointerNullPointer)); EXPECT_FALSE(primitivePointer.IfNull(primitivePointerValidPointer));

        EXPECT_FALSE(object.IfNull(objectVal));
        
        decltype(objectPointer)::type objectPointerNullPointer = nullptr;
        decltype(objectPointer)::type objectPointerPointerValidPointer = (decltype(objectPointer)::type)validPointer;
        EXPECT_TRUE(objectPointer.IfNull(objectPointerNullPointer));
        EXPECT_FALSE(objectPointer.IfNull(objectPointerPointerValidPointer));


        EXPECT_FALSE(ipArray.IfNull(ipArrayVal));
        EXPECT_FALSE(ipStlArray.IfNull(ipStlArrayVal));
        EXPECT_FALSE(ipVector.IfNull(ipVectorVal));
        EXPECT_FALSE(ipDeque.IfNull(ipDequeVal));
        EXPECT_FALSE(ipForwardList.IfNull(ipForwardListVal));
        EXPECT_FALSE(ipList.IfNull(ipListVal));
        EXPECT_FALSE(ipStack.IfNull(ipStackVal));
        EXPECT_FALSE(ipQueue.IfNull(ipQueueVal));
        EXPECT_FALSE(ipPriorityQueue.IfNull(ipPriorityQueueVal));
        EXPECT_FALSE(ipSet.IfNull(ipSetVal));
        EXPECT_FALSE(ipMultiSet.IfNull(ipMultiSetVal));
        EXPECT_FALSE(ipUnorderedSet.IfNull(ipUnorderedSetVal));
        EXPECT_FALSE(ipUnorderedMultiSet.IfNull(ipUnorderedMultiSetVal));

        EXPECT_FALSE(ippArray.IfNull(ippArrayVal));
        EXPECT_FALSE(ippStlArray.IfNull(ippStlArrayVal));
        EXPECT_FALSE(ippVector.IfNull(ippVectorVal));
        EXPECT_FALSE(ippDeque.IfNull(ippDequeVal));
        EXPECT_FALSE(ippForwardList.IfNull(ippForwardListVal));
        EXPECT_FALSE(ippList.IfNull(ippListVal));
        EXPECT_FALSE(ippStack.IfNull(ippStackVal));
        EXPECT_FALSE(ippQueue.IfNull(ippQueueVal));
        EXPECT_FALSE(ippPriorityQueue.IfNull(ippPriorityQueueVal));
        EXPECT_FALSE(ippSet.IfNull(ippSetVal));
        EXPECT_FALSE(ippMultiSet.IfNull(ippMultiSetVal));
        EXPECT_FALSE(ippUnorderedSet.IfNull(ippUnorderedSetVal));
        EXPECT_FALSE(ippUnorderedMultiSet.IfNull(ippUnorderedMultiSetVal));

        EXPECT_FALSE(ipaStlArray.IfNull(ipaStlArrayVal));
        EXPECT_FALSE(ipaVector.IfNull(ipaVectorVal));
        EXPECT_FALSE(ipaDeque.IfNull(ipaDequeVal));
        EXPECT_FALSE(ipaForwardList.IfNull(ipaForwardListVal));
        EXPECT_FALSE(ipaList.IfNull(ipaListVal));
        EXPECT_FALSE(ipaSet.IfNull(ipaSetVal));
        EXPECT_FALSE(ipaMultiSet.IfNull(ipaMultiSetVal));
        EXPECT_FALSE(ipaMap.IfNull(ipaMapVal));
        EXPECT_FALSE(ipaMultiMap.IfNull(ipaMultiMapVal));
        EXPECT_FALSE(ipaUnorderedMap.IfNull(ipaUnorderedMapVal));
        EXPECT_FALSE(ipaUnorderedMultimap.IfNull(ipaUnorderedMultimapVal));

        EXPECT_FALSE(ippaStlArray.IfNull(ippaStlArrayVal));
        EXPECT_FALSE(ippaVector.IfNull(ippaVectorVal));
        EXPECT_FALSE(ippaDeque.IfNull(ippaDequeVal));
        EXPECT_FALSE(ippaForwardList.IfNull(ippaForwardListVal));
        EXPECT_FALSE(ippaList.IfNull(ippaListVal));
        EXPECT_FALSE(ippaSet.IfNull(ippaSetVal));
        EXPECT_FALSE(ippaMultiSet.IfNull(ippaMultiSetVal));
        EXPECT_FALSE(ippaMap.IfNull(ippaMapVal));
        EXPECT_FALSE(ippaMultiMap.IfNull(ippaMultiMapVal));
        EXPECT_FALSE(ippaUnorderedMap.IfNull(ippaUnorderedMapVal));
        EXPECT_FALSE(ippaUnorderedMultimap.IfNull(ippaUnorderedMultimapVal));

        EXPECT_FALSE(ioArray.IfNull(ioArrayVal));
        EXPECT_FALSE(ioStlArray.IfNull(ioStlArrayVal));
        EXPECT_FALSE(ioVector.IfNull(ioVectorVal));
        EXPECT_FALSE(ioDeque.IfNull(ioDequeVal));
        EXPECT_FALSE(ioForwardList.IfNull(ioForwardListVal));
        EXPECT_FALSE(ioList.IfNull(ioListVal));
        EXPECT_FALSE(ioStack.IfNull(ioStackVal));
        EXPECT_FALSE(ioQueue.IfNull(ioQueueVal));
        EXPECT_FALSE(ioPriorityQueue.IfNull(ioPriorityQueueVal));
        EXPECT_FALSE(ioSet.IfNull(ioSetVal));
        EXPECT_FALSE(ioMultiSet.IfNull(ioMultiSetVal));
        EXPECT_FALSE(ioUnorderedSet.IfNull(ioUnorderedSetVal));
        EXPECT_FALSE(ioUnorderedMultiSet.IfNull(ioUnorderedMultiSetVal));

        EXPECT_FALSE(iopArray.IfNull(iopArrayVal));
        EXPECT_FALSE(iopStlArray.IfNull(iopStlArrayVal));
        EXPECT_FALSE(iopVector.IfNull(iopVectorVal));
        EXPECT_FALSE(iopDeque.IfNull(iopDequeVal));
        EXPECT_FALSE(iopForwardList.IfNull(iopForwardListVal));
        EXPECT_FALSE(iopList.IfNull(iopListVal));
        EXPECT_FALSE(iopStack.IfNull(iopStackVal));
        EXPECT_FALSE(iopQueue.IfNull(iopQueueVal));
        EXPECT_FALSE(iopPriorityQueue.IfNull(iopPriorityQueueVal));
        EXPECT_FALSE(iopSet.IfNull(iopSetVal));
        EXPECT_FALSE(iopMultiSet.IfNull(iopMultiSetVal));
        EXPECT_FALSE(iopUnorderedSet.IfNull(iopUnorderedSetVal));
        EXPECT_FALSE(iopUnorderedMultiSet.IfNull(iopUnorderedMultiSetVal));

        EXPECT_FALSE(ioaStlArray.IfNull(ioaStlArrayVal));
        EXPECT_FALSE(ioaVector.IfNull(ioaVectorVal));
        EXPECT_FALSE(ioaDeque.IfNull(ioaDequeVal));
        EXPECT_FALSE(ioaForwardList.IfNull(ioaForwardListVal));
        EXPECT_FALSE(ioaList.IfNull(ioaListVal));
        EXPECT_FALSE(ioaSet.IfNull(ioaSetVal));
        EXPECT_FALSE(ioaMultiSet.IfNull(ioaMultiSetVal));
        EXPECT_FALSE(ioaMap.IfNull(ioaMapVal));
        EXPECT_FALSE(ioaMultiMap.IfNull(ioaMultiMapVal));
        EXPECT_FALSE(ioaUnorderedMap.IfNull(ioaUnorderedMapVal));
        EXPECT_FALSE(ioaUnorderedMultimap.IfNull(ioaUnorderedMultimapVal));

        EXPECT_FALSE(iopaStlArray.IfNull(iopaStlArrayVal));
        EXPECT_FALSE(iopaVector.IfNull(iopaVectorVal));
        EXPECT_FALSE(iopaDeque.IfNull(iopaDequeVal));
        EXPECT_FALSE(iopaForwardList.IfNull(iopaForwardListVal));
        EXPECT_FALSE(iopaList.IfNull(iopaListVal));
        EXPECT_FALSE(iopaSet.IfNull(iopaSetVal));
        EXPECT_FALSE(iopaMultiSet.IfNull(iopaMultiSetVal));
        EXPECT_FALSE(iopaMap.IfNull(iopaMapVal));
        EXPECT_FALSE(iopaMultiMap.IfNull(iopaMultiMapVal));
        EXPECT_FALSE(iopaUnorderedMap.IfNull(iopaUnorderedMapVal));
        EXPECT_FALSE(iopaUnorderedMultimap.IfNull(iopaUnorderedMultimapVal));
        
        decltype(ppArray)::type ppArrayNullPointer = nullptr;
        decltype(ppArray)::type ppArrayValidPointer = (decltype(ppArray)::type)validPointer;
        EXPECT_TRUE(ppArray.IfNull(ppArrayNullPointer));
        EXPECT_FALSE(ppArray.IfNull(ppArrayValidPointer));
        decltype(ppStlArray)::type ppStlArrayNullPointer = nullptr;
        decltype(ppStlArray)::type ppStlArrayValidPointer = (decltype(ppStlArray)::type)validPointer;
        EXPECT_TRUE(ppStlArray.IfNull(ppStlArrayNullPointer));
        EXPECT_FALSE(ppStlArray.IfNull(ppStlArrayValidPointer));
        decltype(ppVector)::type ppVectorNullPointer = nullptr;
        decltype(ppVector)::type ppVectorValidPointer = (decltype(ppVector)::type)validPointer;
        EXPECT_TRUE(ppVector.IfNull(ppVectorNullPointer));
        EXPECT_FALSE(ppVector.IfNull(ppVectorValidPointer));
        decltype(ppDeque)::type ppDequeNullPointer = nullptr;
        decltype(ppDeque)::type ppDequeValidPointer = (decltype(ppDeque)::type)validPointer;
        EXPECT_TRUE(ppDeque.IfNull(ppDequeNullPointer));
        EXPECT_FALSE(ppDeque.IfNull(ppDequeValidPointer));
        decltype(ppForwardList)::type ppForwardListNullPointer = nullptr;
        decltype(ppForwardList)::type ppForwardListValidPointer = (decltype(ppForwardList)::type)validPointer;
        EXPECT_TRUE(ppForwardList.IfNull(ppForwardListNullPointer));
        EXPECT_FALSE(ppForwardList.IfNull(ppForwardListValidPointer));
        decltype(ppList)::type ppListNullPointer = nullptr;
        decltype(ppList)::type ppListValidPointer = (decltype(ppList)::type)validPointer;
        EXPECT_TRUE(ppList.IfNull(ppListNullPointer));
        EXPECT_FALSE(ppList.IfNull(ppListValidPointer));
        decltype(ppStack)::type ppStackNullPointer = nullptr;
        decltype(ppStack)::type ppStackValidPointer = (decltype(ppStack)::type)validPointer;
        EXPECT_TRUE(ppStack.IfNull(ppStackNullPointer));
        EXPECT_FALSE(ppStack.IfNull(ppStackValidPointer));
        decltype(ppQueue)::type ppQueueNullPointer = nullptr;
        decltype(ppQueue)::type ppQueueValidPointer = (decltype(ppQueue)::type)validPointer;
        EXPECT_TRUE(ppQueue.IfNull(ppQueueNullPointer));
        EXPECT_FALSE(ppQueue.IfNull(ppQueueValidPointer));
        decltype(ppPriorityQueue)::type ppPriorityQueueNullPointer = nullptr;
        decltype(ppPriorityQueue)::type ppPriorityQueueValidPointer = (decltype(ppPriorityQueue)::type)validPointer;
        EXPECT_TRUE(ppPriorityQueue.IfNull(ppPriorityQueueNullPointer));
        EXPECT_FALSE(ppPriorityQueue.IfNull(ppPriorityQueueValidPointer));
        decltype(ppSet)::type ppSetNullPointer = nullptr;
        decltype(ppSet)::type ppSetValidPointer = (decltype(ppSet)::type)validPointer;
        EXPECT_TRUE(ppSet.IfNull(ppSetNullPointer));
        EXPECT_FALSE(ppSet.IfNull(ppSetValidPointer));
        decltype(ppMultiSet)::type ppMultiSetNullPointer = nullptr;
        decltype(ppMultiSet)::type ppMultiSetValidPointer = (decltype(ppMultiSet)::type)validPointer;
        EXPECT_TRUE(ppMultiSet.IfNull(ppMultiSetNullPointer));
        EXPECT_FALSE(ppMultiSet.IfNull(ppMultiSetValidPointer));
        decltype(ppUnorderedSet)::type ppUnorderedSetNullPointer = nullptr;
        decltype(ppUnorderedSet)::type ppUnorderedSetValidPointer = (decltype(ppUnorderedSet)::type)validPointer;
        EXPECT_TRUE(ppUnorderedSet.IfNull(ppUnorderedSetNullPointer));
        EXPECT_FALSE(ppUnorderedSet.IfNull(ppUnorderedSetValidPointer));
        decltype(ppUnorderedMultiSet)::type ppUnorderedMultiSetNullPointer = nullptr;
        decltype(ppUnorderedMultiSet)::type ppUnorderedMultiSetValidPointer = (decltype(ppUnorderedMultiSet)::type)validPointer;
        EXPECT_TRUE(ppUnorderedMultiSet.IfNull(ppUnorderedMultiSetNullPointer));
        EXPECT_FALSE(ppUnorderedMultiSet.IfNull(ppUnorderedMultiSetValidPointer));

        decltype(pppArray)::type pppArrayNullPointer = nullptr;
        decltype(pppArray)::type pppArrayValidPointer = (decltype(pppArray)::type)validPointer;
        EXPECT_TRUE(pppArray.IfNull(pppArrayNullPointer));
        EXPECT_FALSE(pppArray.IfNull(pppArrayValidPointer));
        decltype(pppStlArray)::type pppStlArrayNullPointer = nullptr;
        decltype(pppStlArray)::type pppStlArrayValidPointer = (decltype(pppStlArray)::type)validPointer;
        EXPECT_TRUE(pppStlArray.IfNull(pppStlArrayNullPointer));
        EXPECT_FALSE(pppStlArray.IfNull(pppStlArrayValidPointer));
        decltype(pppVector)::type pppVectorNullPointer = nullptr;
        decltype(pppVector)::type pppVectorValidPointer = (decltype(pppVector)::type)validPointer;
        EXPECT_TRUE(pppVector.IfNull(pppVectorNullPointer));
        EXPECT_FALSE(pppVector.IfNull(pppVectorValidPointer));
        decltype(pppDeque)::type pppDequeNullPointer = nullptr;
        decltype(pppDeque)::type pppDequeValidPointer = (decltype(pppDeque)::type)validPointer;
        EXPECT_TRUE(pppDeque.IfNull(pppDequeNullPointer));
        EXPECT_FALSE(pppDeque.IfNull(pppDequeValidPointer));
        decltype(pppForwardList)::type pppForwardListNullPointer = nullptr;
        decltype(pppForwardList)::type pppForwardListValidPointer = (decltype(pppForwardList)::type)validPointer;
        EXPECT_TRUE(pppForwardList.IfNull(pppForwardListNullPointer));
        EXPECT_FALSE(pppForwardList.IfNull(pppForwardListValidPointer));
        decltype(pppList)::type pppListNullPointer = nullptr;
        decltype(pppList)::type pppListValidPointer = (decltype(pppList)::type)validPointer;
        EXPECT_TRUE(pppList.IfNull(pppListNullPointer));
        EXPECT_FALSE(pppList.IfNull(pppListValidPointer));
        decltype(pppStack)::type pppStackNullPointer = nullptr;
        decltype(pppStack)::type pppStackValidPointer = (decltype(pppStack)::type)validPointer;
        EXPECT_TRUE(pppStack.IfNull(pppStackNullPointer));
        EXPECT_FALSE(pppStack.IfNull(pppStackValidPointer));
        decltype(pppQueue)::type pppQueueNullPointer = nullptr;
        decltype(pppQueue)::type pppQueueValidPointer = (decltype(pppQueue)::type)validPointer;
        EXPECT_TRUE(pppQueue.IfNull(pppQueueNullPointer));
        EXPECT_FALSE(pppQueue.IfNull(pppQueueValidPointer));
        decltype(pppPriorityQueue)::type pppPriorityQueueNullPointer = nullptr;
        decltype(pppPriorityQueue)::type pppPriorityQueueValidPointer = (decltype(pppPriorityQueue)::type)validPointer;
        EXPECT_TRUE(pppPriorityQueue.IfNull(pppPriorityQueueNullPointer));
        EXPECT_FALSE(pppPriorityQueue.IfNull(pppPriorityQueueValidPointer));
        decltype(pppSet)::type pppSetNullPointer = nullptr;
        decltype(pppSet)::type pppSetValidPointer = (decltype(pppSet)::type)validPointer;
        EXPECT_TRUE(pppSet.IfNull(pppSetNullPointer));
        EXPECT_FALSE(pppSet.IfNull(pppSetValidPointer));
        decltype(pppMultiSet)::type pppMultiSetNullPointer = nullptr;
        decltype(pppMultiSet)::type pppMultiSetValidPointer = (decltype(pppMultiSet)::type)validPointer;
        EXPECT_TRUE(pppMultiSet.IfNull(pppMultiSetNullPointer));
        EXPECT_FALSE(pppMultiSet.IfNull(pppMultiSetValidPointer));
        decltype(pppUnorderedSet)::type pppUnorderedSetNullPointer = nullptr;
        decltype(pppUnorderedSet)::type pppUnorderedSetValidPointer = (decltype(pppUnorderedSet)::type)validPointer;
        EXPECT_TRUE(pppUnorderedSet.IfNull(pppUnorderedSetNullPointer));
        EXPECT_FALSE(pppUnorderedSet.IfNull(pppUnorderedSetValidPointer));
        decltype(pppUnorderedMultiSet)::type pppUnorderedMultiSetNullPointer = nullptr;
        decltype(pppUnorderedMultiSet)::type pppUnorderedMultiSetValidPointer = (decltype(pppUnorderedMultiSet)::type)validPointer;
        EXPECT_TRUE(pppUnorderedMultiSet.IfNull(pppUnorderedMultiSetNullPointer));
        EXPECT_FALSE(pppUnorderedMultiSet.IfNull(pppUnorderedMultiSetValidPointer));

        decltype(ppaStlArray)::type ppaStlArrayNullPointer = nullptr;
        decltype(ppaStlArray)::type ppaStlArrayValidPointer = (decltype(ppaStlArray)::type)validPointer;
        EXPECT_TRUE(ppaStlArray.IfNull(ppaStlArrayNullPointer));
        EXPECT_FALSE(ppaStlArray.IfNull(ppaStlArrayValidPointer));
        decltype(ppaVector)::type ppaVectorNullPointer = nullptr;
        decltype(ppaVector)::type ppaVectorValidPointer = (decltype(ppaVector)::type)validPointer;
        EXPECT_TRUE(ppaVector.IfNull(ppaVectorNullPointer));
        EXPECT_FALSE(ppaVector.IfNull(ppaVectorValidPointer));
        decltype(ppaDeque)::type ppaDequeNullPointer = nullptr;
        decltype(ppaDeque)::type ppaDequeValidPointer = (decltype(ppaDeque)::type)validPointer;
        EXPECT_TRUE(ppaDeque.IfNull(ppaDequeNullPointer));
        EXPECT_FALSE(ppaDeque.IfNull(ppaDequeValidPointer));
        decltype(ppaForwardList)::type ppaForwardListNullPointer = nullptr;
        decltype(ppaForwardList)::type ppaForwardListValidPointer = (decltype(ppaForwardList)::type)validPointer;
        EXPECT_TRUE(ppaForwardList.IfNull(ppaForwardListNullPointer));
        EXPECT_FALSE(ppaForwardList.IfNull(ppaForwardListValidPointer));
        decltype(ppaList)::type ppaListNullPointer = nullptr;
        decltype(ppaList)::type ppaListValidPointer = (decltype(ppaList)::type)validPointer;
        EXPECT_TRUE(ppaList.IfNull(ppaListNullPointer));
        EXPECT_FALSE(ppaList.IfNull(ppaListValidPointer));
        decltype(ppaSet)::type ppaSetNullPointer = nullptr;
        decltype(ppaSet)::type ppaSetValidPointer = (decltype(ppaSet)::type)validPointer;
        EXPECT_TRUE(ppaSet.IfNull(ppaSetNullPointer));
        EXPECT_FALSE(ppaSet.IfNull(ppaSetValidPointer));
        decltype(ppaMultiSet)::type ppaMultiSetNullPointer = nullptr;
        decltype(ppaMultiSet)::type ppaMultiSetValidPointer = (decltype(ppaMultiSet)::type)validPointer;
        EXPECT_TRUE(ppaMultiSet.IfNull(ppaMultiSetNullPointer));
        EXPECT_FALSE(ppaMultiSet.IfNull(ppaMultiSetValidPointer));
        decltype(ppaMap)::type ppaMapNullPointer = nullptr;
        decltype(ppaMap)::type ppaMapValidPointer = (decltype(ppaMap)::type)validPointer;
        EXPECT_TRUE(ppaMap.IfNull(ppaMapNullPointer));
        EXPECT_FALSE(ppaMap.IfNull(ppaMapValidPointer));
        decltype(ppaMultiMap)::type ppaMultiMapNullPointer = nullptr;
        decltype(ppaMultiMap)::type ppaMultiMapValidPointer = (decltype(ppaMultiMap)::type)validPointer;
        EXPECT_TRUE(ppaMultiMap.IfNull(ppaMultiMapNullPointer));
        EXPECT_FALSE(ppaMultiMap.IfNull(ppaMultiMapValidPointer));
        decltype(ppaUnorderedMap)::type ppaUnorderedMapNullPointer = nullptr;
        decltype(ppaUnorderedMap)::type ppaUnorderedMapValidPointer = (decltype(ppaUnorderedMap)::type)validPointer;
        EXPECT_TRUE(ppaUnorderedMap.IfNull(ppaUnorderedMapNullPointer));
        EXPECT_FALSE(ppaUnorderedMap.IfNull(ppaUnorderedMapValidPointer));
        decltype(ppaUnorderedMultimap)::type ppaUnorderedMultimapNullPointer = nullptr;
        decltype(ppaUnorderedMultimap)::type ppaUnorderedMultimapValidPointer = (decltype(ppaUnorderedMultimap)::type)validPointer;
        EXPECT_TRUE(ppaUnorderedMultimap.IfNull(ppaUnorderedMultimapNullPointer));
        EXPECT_FALSE(ppaUnorderedMultimap.IfNull(ppaUnorderedMultimapValidPointer));

        decltype(pppaStlArray)::type pppaStlArrayNullPointer = nullptr;
        decltype(pppaStlArray)::type pppaStlArrayValidPointer = (decltype(pppaStlArray)::type)validPointer;
        EXPECT_TRUE(pppaStlArray.IfNull(pppaStlArrayNullPointer));
        EXPECT_FALSE(pppaStlArray.IfNull(pppaStlArrayValidPointer));
        decltype(pppaVector)::type pppaVectorNullPointer = nullptr;
        decltype(pppaVector)::type pppaVectorValidPointer = (decltype(pppaVector)::type)validPointer;
        EXPECT_TRUE(pppaVector.IfNull(pppaVectorNullPointer));
        EXPECT_FALSE(pppaVector.IfNull(pppaVectorValidPointer));
        decltype(pppaDeque)::type pppaDequeNullPointer = nullptr;
        decltype(pppaDeque)::type pppaDequeValidPointer = (decltype(pppaDeque)::type)validPointer;
        EXPECT_TRUE(pppaDeque.IfNull(pppaDequeNullPointer));
        EXPECT_FALSE(pppaDeque.IfNull(pppaDequeValidPointer));
        decltype(pppaForwardList)::type pppaForwardListNullPointer = nullptr;
        decltype(pppaForwardList)::type pppaForwardListValidPointer = (decltype(pppaForwardList)::type)validPointer;
        EXPECT_TRUE(pppaForwardList.IfNull(pppaForwardListNullPointer));
        EXPECT_FALSE(pppaForwardList.IfNull(pppaForwardListValidPointer));
        decltype(pppaList)::type pppaListNullPointer = nullptr;
        decltype(pppaList)::type pppaListValidPointer = (decltype(pppaList)::type)validPointer;
        EXPECT_TRUE(pppaList.IfNull(pppaListNullPointer));
        EXPECT_FALSE(pppaList.IfNull(pppaListValidPointer));
        decltype(pppaSet)::type pppaSetNullPointer = nullptr;
        decltype(pppaSet)::type pppaSetValidPointer = (decltype(pppaSet)::type)validPointer;
        EXPECT_TRUE(pppaSet.IfNull(pppaSetNullPointer));
        EXPECT_FALSE(pppaSet.IfNull(pppaSetValidPointer));
        decltype(pppaMultiSet)::type pppaMultiSetNullPointer = nullptr;
        decltype(pppaMultiSet)::type pppaMultiSetValidPointer = (decltype(pppaMultiSet)::type)validPointer;
        EXPECT_TRUE(pppaMultiSet.IfNull(pppaMultiSetNullPointer));
        EXPECT_FALSE(pppaMultiSet.IfNull(pppaMultiSetValidPointer));
        decltype(pppaMap)::type pppaMapNullPointer = nullptr;
        decltype(pppaMap)::type pppaMapValidPointer = (decltype(pppaMap)::type)validPointer;
        EXPECT_TRUE(pppaMap.IfNull(pppaMapNullPointer));
        EXPECT_FALSE(pppaMap.IfNull(pppaMapValidPointer));
        decltype(pppaMultiMap)::type pppaMultiMapNullPointer = nullptr;
        decltype(pppaMultiMap)::type pppaMultiMapValidPointer = (decltype(pppaMultiMap)::type)validPointer;
        EXPECT_TRUE(pppaMultiMap.IfNull(pppaMultiMapNullPointer));
        EXPECT_FALSE(pppaMultiMap.IfNull(pppaMultiMapValidPointer));
        decltype(pppaUnorderedMap)::type pppaUnorderedMapNullPointer = nullptr;
        decltype(pppaUnorderedMap)::type pppaUnorderedMapValidPointer = (decltype(pppaUnorderedMap)::type)validPointer;
        EXPECT_TRUE(pppaUnorderedMap.IfNull(pppaUnorderedMapNullPointer));
        EXPECT_FALSE(pppaUnorderedMap.IfNull(pppaUnorderedMapValidPointer));
        decltype(pppaUnorderedMultimap)::type pppaUnorderedMultimapNullPointer = nullptr;
        decltype(pppaUnorderedMultimap)::type pppaUnorderedMultimapValidPointer = (decltype(pppaUnorderedMultimap)::type)validPointer;
        EXPECT_TRUE(pppaUnorderedMultimap.IfNull(pppaUnorderedMultimapNullPointer));
        EXPECT_FALSE(pppaUnorderedMultimap.IfNull(pppaUnorderedMultimapValidPointer));

        decltype(poArray)::type poArrayNullPointer = nullptr;
        decltype(poArray)::type poArrayValidPointer = (decltype(poArray)::type)validPointer;
        EXPECT_TRUE(poArray.IfNull(poArrayNullPointer));
        EXPECT_FALSE(poArray.IfNull(poArrayValidPointer));
        decltype(poStlArray)::type poStlArrayNullPointer = nullptr;
        decltype(poStlArray)::type poStlArrayValidPointer = (decltype(poStlArray)::type)validPointer;
        EXPECT_TRUE(poStlArray.IfNull(poStlArrayNullPointer));
        EXPECT_FALSE(poStlArray.IfNull(poStlArrayValidPointer));
        decltype(poVector)::type poVectorNullPointer = nullptr;
        decltype(poVector)::type poVectorValidPointer = (decltype(poVector)::type)validPointer;
        EXPECT_TRUE(poVector.IfNull(poVectorNullPointer));
        EXPECT_FALSE(poVector.IfNull(poVectorValidPointer));
        decltype(poDeque)::type poDequeNullPointer = nullptr;
        decltype(poDeque)::type poDequeValidPointer = (decltype(poDeque)::type)validPointer;
        EXPECT_TRUE(poDeque.IfNull(poDequeNullPointer));
        EXPECT_FALSE(poDeque.IfNull(poDequeValidPointer));
        decltype(poForwardList)::type poForwardListNullPointer = nullptr;
        decltype(poForwardList)::type poForwardListValidPointer = (decltype(poForwardList)::type)validPointer;
        EXPECT_TRUE(poForwardList.IfNull(poForwardListNullPointer));
        EXPECT_FALSE(poForwardList.IfNull(poForwardListValidPointer));
        decltype(poList)::type poListNullPointer = nullptr;
        decltype(poList)::type poListValidPointer = (decltype(poList)::type)validPointer;
        EXPECT_TRUE(poList.IfNull(poListNullPointer));
        EXPECT_FALSE(poList.IfNull(poListValidPointer));
        decltype(poStack)::type poStackNullPointer = nullptr;
        decltype(poStack)::type poStackValidPointer = (decltype(poStack)::type)validPointer;
        EXPECT_TRUE(poStack.IfNull(poStackNullPointer));
        EXPECT_FALSE(poStack.IfNull(poStackValidPointer));
        decltype(poQueue)::type poQueueNullPointer = nullptr;
        decltype(poQueue)::type poQueueValidPointer = (decltype(poQueue)::type)validPointer;
        EXPECT_TRUE(poQueue.IfNull(poQueueNullPointer));
        EXPECT_FALSE(poQueue.IfNull(poQueueValidPointer));
        decltype(poPriorityQueue)::type poPriorityQueueNullPointer = nullptr;
        decltype(poPriorityQueue)::type poPriorityQueueValidPointer = (decltype(poPriorityQueue)::type)validPointer;
        EXPECT_TRUE(poPriorityQueue.IfNull(poPriorityQueueNullPointer));
        EXPECT_FALSE(poPriorityQueue.IfNull(poPriorityQueueValidPointer));
        decltype(poSet)::type poSetNullPointer = nullptr;
        decltype(poSet)::type poSetValidPointer = (decltype(poSet)::type)validPointer;
        EXPECT_TRUE(poSet.IfNull(poSetNullPointer));
        EXPECT_FALSE(poSet.IfNull(poSetValidPointer));
        decltype(poMultiSet)::type poMultiSetNullPointer = nullptr;
        decltype(poMultiSet)::type poMultiSetValidPointer = (decltype(poMultiSet)::type)validPointer;
        EXPECT_TRUE(poMultiSet.IfNull(poMultiSetNullPointer));
        EXPECT_FALSE(poMultiSet.IfNull(poMultiSetValidPointer));
        decltype(poUnorderedSet)::type poUnorderedSetNullPointer = nullptr;
        decltype(poUnorderedSet)::type poUnorderedSetValidPointer = (decltype(poUnorderedSet)::type)validPointer;
        EXPECT_TRUE(poUnorderedSet.IfNull(poUnorderedSetNullPointer));
        EXPECT_FALSE(poUnorderedSet.IfNull(poUnorderedSetValidPointer));
        decltype(poUnorderedMultiSet)::type poUnorderedMultiSetNullPointer = nullptr;
        decltype(poUnorderedMultiSet)::type poUnorderedMultiSetValidPointer = (decltype(poUnorderedMultiSet)::type)validPointer;
        EXPECT_TRUE(poUnorderedMultiSet.IfNull(poUnorderedMultiSetNullPointer));
        EXPECT_FALSE(poUnorderedMultiSet.IfNull(poUnorderedMultiSetValidPointer));

        decltype(popArray)::type popArrayNullPointer = nullptr;
        decltype(popArray)::type popArrayValidPointer = (decltype(popArray)::type)validPointer;
        EXPECT_TRUE(popArray.IfNull(popArrayNullPointer));
        EXPECT_FALSE(popArray.IfNull(popArrayValidPointer));
        decltype(popStlArray)::type popStlArrayNullPointer = nullptr;
        decltype(popStlArray)::type popStlArrayValidPointer = (decltype(popStlArray)::type)validPointer;
        EXPECT_TRUE(popStlArray.IfNull(popStlArrayNullPointer));
        EXPECT_FALSE(popStlArray.IfNull(popStlArrayValidPointer));
        decltype(popVector)::type popVectorNullPointer = nullptr;
        decltype(popVector)::type popVectorValidPointer = (decltype(popVector)::type)validPointer;
        EXPECT_TRUE(popVector.IfNull(popVectorNullPointer));
        EXPECT_FALSE(popVector.IfNull(popVectorValidPointer));
        decltype(popDeque)::type popDequeNullPointer = nullptr;
        decltype(popDeque)::type popDequeValidPointer = (decltype(popDeque)::type)validPointer;
        EXPECT_TRUE(popDeque.IfNull(popDequeNullPointer));
        EXPECT_FALSE(popDeque.IfNull(popDequeValidPointer));
        decltype(popForwardList)::type popForwardListNullPointer = nullptr;
        decltype(popForwardList)::type popForwardListValidPointer = (decltype(popForwardList)::type)validPointer;
        EXPECT_TRUE(popForwardList.IfNull(popForwardListNullPointer));
        EXPECT_FALSE(popForwardList.IfNull(popForwardListValidPointer));
        decltype(popList)::type popListNullPointer = nullptr;
        decltype(popList)::type popListValidPointer = (decltype(popList)::type)validPointer;
        EXPECT_TRUE(popList.IfNull(popListNullPointer));
        EXPECT_FALSE(popList.IfNull(popListValidPointer));
        decltype(popStack)::type popStackNullPointer = nullptr;
        decltype(popStack)::type popStackValidPointer = (decltype(popStack)::type)validPointer;
        EXPECT_TRUE(popStack.IfNull(popStackNullPointer));
        EXPECT_FALSE(popStack.IfNull(popStackValidPointer));
        decltype(popQueue)::type popQueueNullPointer = nullptr;
        decltype(popQueue)::type popQueueValidPointer = (decltype(popQueue)::type)validPointer;
        EXPECT_TRUE(popQueue.IfNull(popQueueNullPointer));
        EXPECT_FALSE(popQueue.IfNull(popQueueValidPointer));
        decltype(popPriorityQueue)::type popPriorityQueueNullPointer = nullptr;
        decltype(popPriorityQueue)::type popPriorityQueueValidPointer = (decltype(popPriorityQueue)::type)validPointer;
        EXPECT_TRUE(popPriorityQueue.IfNull(popPriorityQueueNullPointer));
        EXPECT_FALSE(popPriorityQueue.IfNull(popPriorityQueueValidPointer));
        decltype(popSet)::type popSetNullPointer = nullptr;
        decltype(popSet)::type popSetValidPointer = (decltype(popSet)::type)validPointer;
        EXPECT_TRUE(popSet.IfNull(popSetNullPointer));
        EXPECT_FALSE(popSet.IfNull(popSetValidPointer));
        decltype(popMultiSet)::type popMultiSetNullPointer = nullptr;
        decltype(popMultiSet)::type popMultiSetValidPointer = (decltype(popMultiSet)::type)validPointer;
        EXPECT_TRUE(popMultiSet.IfNull(popMultiSetNullPointer));
        EXPECT_FALSE(popMultiSet.IfNull(popMultiSetValidPointer));
        decltype(popUnorderedSet)::type popUnorderedSetNullPointer = nullptr;
        decltype(popUnorderedSet)::type popUnorderedSetValidPointer = (decltype(popUnorderedSet)::type)validPointer;
        EXPECT_TRUE(popUnorderedSet.IfNull(popUnorderedSetNullPointer));
        EXPECT_FALSE(popUnorderedSet.IfNull(popUnorderedSetValidPointer));
        decltype(popUnorderedMultiSet)::type popUnorderedMultiSetNullPointer = nullptr;
        decltype(popUnorderedMultiSet)::type popUnorderedMultiSetValidPointer = (decltype(popUnorderedMultiSet)::type)validPointer;
        EXPECT_TRUE(popUnorderedMultiSet.IfNull(popUnorderedMultiSetNullPointer));
        EXPECT_FALSE(popUnorderedMultiSet.IfNull(popUnorderedMultiSetValidPointer));

        decltype(poaStlArray)::type poaStlArrayNullPointer = nullptr;
        decltype(poaStlArray)::type poaStlArrayValidPointer = (decltype(poaStlArray)::type)validPointer;
        EXPECT_TRUE(poaStlArray.IfNull(poaStlArrayNullPointer));
        EXPECT_FALSE(poaStlArray.IfNull(poaStlArrayValidPointer));
        decltype(poaVector)::type poaVectorNullPointer = nullptr;
        decltype(poaVector)::type poaVectorValidPointer = (decltype(poaVector)::type)validPointer;
        EXPECT_TRUE(poaVector.IfNull(poaVectorNullPointer));
        EXPECT_FALSE(poaVector.IfNull(poaVectorValidPointer));
        decltype(poaDeque)::type poaDequeNullPointer = nullptr;
        decltype(poaDeque)::type poaDequeValidPointer = (decltype(poaDeque)::type)validPointer;
        EXPECT_TRUE(poaDeque.IfNull(poaDequeNullPointer));
        EXPECT_FALSE(poaDeque.IfNull(poaDequeValidPointer));
        decltype(poaForwardList)::type poaForwardListNullPointer = nullptr;
        decltype(poaForwardList)::type poaForwardListValidPointer = (decltype(poaForwardList)::type)validPointer;
        EXPECT_TRUE(poaForwardList.IfNull(poaForwardListNullPointer));
        EXPECT_FALSE(poaForwardList.IfNull(poaForwardListValidPointer));
        decltype(poaList)::type poaListNullPointer = nullptr;
        decltype(poaList)::type poaListValidPointer = (decltype(poaList)::type)validPointer;
        EXPECT_TRUE(poaList.IfNull(poaListNullPointer));
        EXPECT_FALSE(poaList.IfNull(poaListValidPointer));
        decltype(poaSet)::type poaSetNullPointer = nullptr;
        decltype(poaSet)::type poaSetValidPointer = (decltype(poaSet)::type)validPointer;
        EXPECT_TRUE(poaSet.IfNull(poaSetNullPointer));
        EXPECT_FALSE(poaSet.IfNull(poaSetValidPointer));
        decltype(poaMultiSet)::type poaMultiSetNullPointer = nullptr;
        decltype(poaMultiSet)::type poaMultiSetValidPointer = (decltype(poaMultiSet)::type)validPointer;
        EXPECT_TRUE(poaMultiSet.IfNull(poaMultiSetNullPointer));
        EXPECT_FALSE(poaMultiSet.IfNull(poaMultiSetValidPointer));
        decltype(poaMap)::type poaMapNullPointer = nullptr;
        decltype(poaMap)::type poaMapValidPointer = (decltype(poaMap)::type)validPointer;
        EXPECT_TRUE(poaMap.IfNull(poaMapNullPointer));
        EXPECT_FALSE(poaMap.IfNull(poaMapValidPointer));
        decltype(poaMultiMap)::type poaMultiMapNullPointer = nullptr;
        decltype(poaMultiMap)::type poaMultiMapValidPointer = (decltype(poaMultiMap)::type)validPointer;
        EXPECT_TRUE(poaMultiMap.IfNull(poaMultiMapNullPointer));
        EXPECT_FALSE(poaMultiMap.IfNull(poaMultiMapValidPointer));
        decltype(poaUnorderedMap)::type poaUnorderedMapNullPointer = nullptr;
        decltype(poaUnorderedMap)::type poaUnorderedMapValidPointer = (decltype(poaUnorderedMap)::type)validPointer;
        EXPECT_TRUE(poaUnorderedMap.IfNull(poaUnorderedMapNullPointer));
        EXPECT_FALSE(poaUnorderedMap.IfNull(poaUnorderedMapValidPointer));
        decltype(poaUnorderedMultimap)::type poaUnorderedMultimapNullPointer = nullptr;
        decltype(poaUnorderedMultimap)::type poaUnorderedMultimapValidPointer = (decltype(poaUnorderedMultimap)::type)validPointer;
        EXPECT_TRUE(poaUnorderedMultimap.IfNull(poaUnorderedMultimapNullPointer));
        EXPECT_FALSE(poaUnorderedMultimap.IfNull(poaUnorderedMultimapValidPointer));

        decltype(popaStlArray)::type popaStlArrayNullPointer = nullptr;
        decltype(popaStlArray)::type popaStlArrayValidPointer = (decltype(popaStlArray)::type)validPointer;
        EXPECT_TRUE(popaStlArray.IfNull(popaStlArrayNullPointer));
        EXPECT_FALSE(popaStlArray.IfNull(popaStlArrayValidPointer));
        decltype(popaVector)::type popaVectorNullPointer = nullptr;
        decltype(popaVector)::type popaVectorValidPointer = (decltype(popaVector)::type)validPointer;
        EXPECT_TRUE(popaVector.IfNull(popaVectorNullPointer));
        EXPECT_FALSE(popaVector.IfNull(popaVectorValidPointer));
        decltype(popaDeque)::type popaDequeNullPointer = nullptr;
        decltype(popaDeque)::type popaDequeValidPointer = (decltype(popaDeque)::type)validPointer;
        EXPECT_TRUE(popaDeque.IfNull(popaDequeNullPointer));
        EXPECT_FALSE(popaDeque.IfNull(popaDequeValidPointer));
        decltype(popaForwardList)::type popaForwardListNullPointer = nullptr;
        decltype(popaForwardList)::type popaForwardListValidPointer = (decltype(popaForwardList)::type)validPointer;
        EXPECT_TRUE(popaForwardList.IfNull(popaForwardListNullPointer));
        EXPECT_FALSE(popaForwardList.IfNull(popaForwardListValidPointer));
        decltype(popaList)::type popaListNullPointer = nullptr;
        decltype(popaList)::type popaListValidPointer = (decltype(popaList)::type)validPointer;
        EXPECT_TRUE(popaList.IfNull(popaListNullPointer));
        EXPECT_FALSE(popaList.IfNull(popaListValidPointer));
        decltype(popaSet)::type popaSetNullPointer = nullptr;
        decltype(popaSet)::type popaSetValidPointer = (decltype(popaSet)::type)validPointer;
        EXPECT_TRUE(popaSet.IfNull(popaSetNullPointer));
        EXPECT_FALSE(popaSet.IfNull(popaSetValidPointer));
        decltype(popaMultiSet)::type popaMultiSetNullPointer = nullptr;
        decltype(popaMultiSet)::type popaMultiSetValidPointer = (decltype(popaMultiSet)::type)validPointer;
        EXPECT_TRUE(popaMultiSet.IfNull(popaMultiSetNullPointer));
        EXPECT_FALSE(popaMultiSet.IfNull(popaMultiSetValidPointer));
        decltype(popaMap)::type popaMapNullPointer = nullptr;
        decltype(popaMap)::type popaMapValidPointer = (decltype(popaMap)::type)validPointer;
        EXPECT_TRUE(popaMap.IfNull(popaMapNullPointer));
        EXPECT_FALSE(popaMap.IfNull(popaMapValidPointer));
        decltype(popaMultiMap)::type popaMultiMapNullPointer = nullptr;
        decltype(popaMultiMap)::type popaMultiMapValidPointer = (decltype(popaMultiMap)::type)validPointer;
        EXPECT_TRUE(popaMultiMap.IfNull(popaMultiMapNullPointer));
        EXPECT_FALSE(popaMultiMap.IfNull(popaMultiMapValidPointer));
        decltype(popaUnorderedMap)::type popaUnorderedMapNullPointer = nullptr;
        decltype(popaUnorderedMap)::type popaUnorderedMapValidPointer = (decltype(popaUnorderedMap)::type)validPointer;
        EXPECT_TRUE(popaUnorderedMap.IfNull(popaUnorderedMapNullPointer));
        EXPECT_FALSE(popaUnorderedMap.IfNull(popaUnorderedMapValidPointer));
        decltype(popaUnorderedMultimap)::type popaUnorderedMultimapNullPointer = nullptr;
        decltype(popaUnorderedMultimap)::type popaUnorderedMultimapValidPointer = (decltype(popaUnorderedMultimap)::type)validPointer;
        EXPECT_TRUE(popaUnorderedMultimap.IfNull(popaUnorderedMultimapNullPointer));
        EXPECT_FALSE(popaUnorderedMultimap.IfNull(popaUnorderedMultimapValidPointer));
    }

    TEST(LambdaGuardTest, Singular)
    {
        v=F; primitive.IfPrimitive(f); EXPECT_TRUE(v);
        v=F; primitive.IfPrimitivePointer(f); EXPECT_FALSE(v);
        v=F; primitive.IfObject(f); EXPECT_FALSE(v);
        v=F; primitive.IfObjectPointer(f); EXPECT_FALSE(v);
        v=F; primitive.IfPrimitiveArray(f); EXPECT_FALSE(v);
        v=F; primitive.IfPrimitiveArrayPointer(f); EXPECT_FALSE(v);
        v=F; primitive.IfIterablePrimitives(f); EXPECT_FALSE(v);
        v=F; primitive.IfIterablePrimitivesPointer(f); EXPECT_FALSE(v);
        v=F; primitive.IfPrimitiveAdaptor(f); EXPECT_FALSE(v);
        v=F; primitive.IfPrimitiveAdaptorPointer(f); EXPECT_FALSE(v);
        v=F; primitive.IfPrimitivePointerArray(f); EXPECT_FALSE(v);
        v=F; primitive.IfPrimitivePointerArrayPointer(f); EXPECT_FALSE(v);
        v=F; primitive.IfIterablePrimitivePointers(f); EXPECT_FALSE(v);
        v=F; primitive.IfIterablePrimitivePointersPointer(f); EXPECT_FALSE(v);
        v=F; primitive.IfPrimitivePointerAdaptor(f); EXPECT_FALSE(v);
        v=F; primitive.IfPrimitivePointerAdaptorPointer(f); EXPECT_FALSE(v);
        v=F; primitive.IfObjectArray(f); EXPECT_FALSE(v);
        v=F; primitive.IfObjectArrayPointer(f); EXPECT_FALSE(v);
        v=F; primitive.IfIterableObjects(f); EXPECT_FALSE(v);
        v=F; primitive.IfIterableObjectsPointer(f); EXPECT_FALSE(v);
        v=F; primitive.IfObjectAdaptor(f); EXPECT_FALSE(v);
        v=F; primitive.IfObjectAdaptorPointer(f); EXPECT_FALSE(v);
        v=F; primitive.IfObjectPointerArray(f); EXPECT_FALSE(v);
        v=F; primitive.IfObjectPointerArrayPointer(f); EXPECT_FALSE(v);
        v=F; primitive.IfIterableObjectPointers(f); EXPECT_FALSE(v);
        v=F; primitive.IfIterableObjectPointersPointer(f); EXPECT_FALSE(v);
        v=F; primitive.IfObjectPointerAdaptor(f); EXPECT_FALSE(v);
        v=F; primitive.IfObjectPointerAdaptorPointer(f); EXPECT_FALSE(v);
        v=F; primitive.IfIterablePrimitivePairs(f); EXPECT_FALSE(v);
        v=F; primitive.IfIterablePrimitivePairsPointer(f); EXPECT_FALSE(v);
        v=F; primitive.IfIterablePrimitivePointerPairs(f); EXPECT_FALSE(v);
        v=F; primitive.IfIterablePrimitivePointerPairsPointer(f); EXPECT_FALSE(v);
        v=F; primitive.IfIterableObjectPairs(f); EXPECT_FALSE(v);
        v=F; primitive.IfIterableObjectPairsPointer(f); EXPECT_FALSE(v);
        v=F; primitive.IfIterableObjectPointerPairs(f); EXPECT_FALSE(v);
        v=F; primitive.IfIterableObjectPointerPairsPointer(f); EXPECT_FALSE(v);

        v=F; primitivePointer.IfPrimitive(f); EXPECT_FALSE(v);
        v=F; primitivePointer.IfPrimitivePointer(f); EXPECT_TRUE(v);
        v=F; primitivePointer.IfObject(f); EXPECT_FALSE(v);
        v=F; primitivePointer.IfObjectPointer(f); EXPECT_FALSE(v);
        v=F; primitivePointer.IfPrimitiveArray(f); EXPECT_FALSE(v);
        v=F; primitivePointer.IfPrimitiveArrayPointer(f); EXPECT_FALSE(v);
        v=F; primitivePointer.IfIterablePrimitives(f); EXPECT_FALSE(v);
        v=F; primitivePointer.IfIterablePrimitivesPointer(f); EXPECT_FALSE(v);
        v=F; primitivePointer.IfPrimitiveAdaptor(f); EXPECT_FALSE(v);
        v=F; primitivePointer.IfPrimitiveAdaptorPointer(f); EXPECT_FALSE(v);
        v=F; primitivePointer.IfPrimitivePointerArray(f); EXPECT_FALSE(v);
        v=F; primitivePointer.IfPrimitivePointerArrayPointer(f); EXPECT_FALSE(v);
        v=F; primitivePointer.IfIterablePrimitivePointers(f); EXPECT_FALSE(v);
        v=F; primitivePointer.IfIterablePrimitivePointersPointer(f); EXPECT_FALSE(v);
        v=F; primitivePointer.IfPrimitivePointerAdaptor(f); EXPECT_FALSE(v);
        v=F; primitivePointer.IfPrimitivePointerAdaptorPointer(f); EXPECT_FALSE(v);
        v=F; primitivePointer.IfObjectArray(f); EXPECT_FALSE(v);
        v=F; primitivePointer.IfObjectArrayPointer(f); EXPECT_FALSE(v);
        v=F; primitivePointer.IfIterableObjects(f); EXPECT_FALSE(v);
        v=F; primitivePointer.IfIterableObjectsPointer(f); EXPECT_FALSE(v);
        v=F; primitivePointer.IfObjectAdaptor(f); EXPECT_FALSE(v);
        v=F; primitivePointer.IfObjectAdaptorPointer(f); EXPECT_FALSE(v);
        v=F; primitivePointer.IfObjectPointerArray(f); EXPECT_FALSE(v);
        v=F; primitivePointer.IfObjectPointerArrayPointer(f); EXPECT_FALSE(v);
        v=F; primitivePointer.IfIterableObjectPointers(f); EXPECT_FALSE(v);
        v=F; primitivePointer.IfIterableObjectPointersPointer(f); EXPECT_FALSE(v);
        v=F; primitivePointer.IfObjectPointerAdaptor(f); EXPECT_FALSE(v);
        v=F; primitivePointer.IfObjectPointerAdaptorPointer(f); EXPECT_FALSE(v);
        v=F; primitivePointer.IfIterablePrimitivePairs(f); EXPECT_FALSE(v);
        v=F; primitivePointer.IfIterablePrimitivePairsPointer(f); EXPECT_FALSE(v);
        v=F; primitivePointer.IfIterablePrimitivePointerPairs(f); EXPECT_FALSE(v);
        v=F; primitivePointer.IfIterablePrimitivePointerPairsPointer(f); EXPECT_FALSE(v);
        v=F; primitivePointer.IfIterableObjectPairs(f); EXPECT_FALSE(v);
        v=F; primitivePointer.IfIterableObjectPairsPointer(f); EXPECT_FALSE(v);
        v=F; primitivePointer.IfIterableObjectPointerPairs(f); EXPECT_FALSE(v);
        v=F; primitivePointer.IfIterableObjectPointerPairsPointer(f); EXPECT_FALSE(v);

        v=F; object.IfPrimitive(f); EXPECT_FALSE(v);
        v=F; object.IfPrimitivePointer(f); EXPECT_FALSE(v);
        v=F; object.IfObject(f); EXPECT_TRUE(v);
        v=F; object.IfObjectPointer(f); EXPECT_FALSE(v);
        v=F; object.IfPrimitiveArray(f); EXPECT_FALSE(v);
        v=F; object.IfPrimitiveArrayPointer(f); EXPECT_FALSE(v);
        v=F; object.IfIterablePrimitives(f); EXPECT_FALSE(v);
        v=F; object.IfIterablePrimitivesPointer(f); EXPECT_FALSE(v);
        v=F; object.IfPrimitiveAdaptor(f); EXPECT_FALSE(v);
        v=F; object.IfPrimitiveAdaptorPointer(f); EXPECT_FALSE(v);
        v=F; object.IfPrimitivePointerArray(f); EXPECT_FALSE(v);
        v=F; object.IfPrimitivePointerArrayPointer(f); EXPECT_FALSE(v);
        v=F; object.IfIterablePrimitivePointers(f); EXPECT_FALSE(v);
        v=F; object.IfIterablePrimitivePointersPointer(f); EXPECT_FALSE(v);
        v=F; object.IfPrimitivePointerAdaptor(f); EXPECT_FALSE(v);
        v=F; object.IfPrimitivePointerAdaptorPointer(f); EXPECT_FALSE(v);
        v=F; object.IfObjectArray(f); EXPECT_FALSE(v);
        v=F; object.IfObjectArrayPointer(f); EXPECT_FALSE(v);
        v=F; object.IfIterableObjects(f); EXPECT_FALSE(v);
        v=F; object.IfIterableObjectsPointer(f); EXPECT_FALSE(v);
        v=F; object.IfObjectAdaptor(f); EXPECT_FALSE(v);
        v=F; object.IfObjectAdaptorPointer(f); EXPECT_FALSE(v);
        v=F; object.IfObjectPointerArray(f); EXPECT_FALSE(v);
        v=F; object.IfObjectPointerArrayPointer(f); EXPECT_FALSE(v);
        v=F; object.IfIterableObjectPointers(f); EXPECT_FALSE(v);
        v=F; object.IfIterableObjectPointersPointer(f); EXPECT_FALSE(v);
        v=F; object.IfObjectPointerAdaptor(f); EXPECT_FALSE(v);
        v=F; object.IfObjectPointerAdaptorPointer(f); EXPECT_FALSE(v);
        v=F; object.IfIterablePrimitivePairs(f); EXPECT_FALSE(v);
        v=F; object.IfIterablePrimitivePairsPointer(f); EXPECT_FALSE(v);
        v=F; object.IfIterablePrimitivePointerPairs(f); EXPECT_FALSE(v);
        v=F; object.IfIterablePrimitivePointerPairsPointer(f); EXPECT_FALSE(v);
        v=F; object.IfIterableObjectPairs(f); EXPECT_FALSE(v);
        v=F; object.IfIterableObjectPairsPointer(f); EXPECT_FALSE(v);
        v=F; object.IfIterableObjectPointerPairs(f); EXPECT_FALSE(v);
        v=F; object.IfIterableObjectPointerPairsPointer(f); EXPECT_FALSE(v);

        v=F; objectPointer.IfPrimitive(f); EXPECT_FALSE(v);
        v=F; objectPointer.IfPrimitivePointer(f); EXPECT_FALSE(v);
        v=F; objectPointer.IfObject(f); EXPECT_FALSE(v);
        v=F; objectPointer.IfObjectPointer(f); EXPECT_TRUE(v);
        v=F; objectPointer.IfPrimitiveArray(f); EXPECT_FALSE(v);
        v=F; objectPointer.IfPrimitiveArrayPointer(f); EXPECT_FALSE(v);
        v=F; objectPointer.IfIterablePrimitives(f); EXPECT_FALSE(v);
        v=F; objectPointer.IfIterablePrimitivesPointer(f); EXPECT_FALSE(v);
        v=F; objectPointer.IfPrimitiveAdaptor(f); EXPECT_FALSE(v);
        v=F; objectPointer.IfPrimitiveAdaptorPointer(f); EXPECT_FALSE(v);
        v=F; objectPointer.IfPrimitivePointerArray(f); EXPECT_FALSE(v);
        v=F; objectPointer.IfPrimitivePointerArrayPointer(f); EXPECT_FALSE(v);
        v=F; objectPointer.IfIterablePrimitivePointers(f); EXPECT_FALSE(v);
        v=F; objectPointer.IfIterablePrimitivePointersPointer(f); EXPECT_FALSE(v);
        v=F; objectPointer.IfPrimitivePointerAdaptor(f); EXPECT_FALSE(v);
        v=F; objectPointer.IfPrimitivePointerAdaptorPointer(f); EXPECT_FALSE(v);
        v=F; objectPointer.IfObjectArray(f); EXPECT_FALSE(v);
        v=F; objectPointer.IfObjectArrayPointer(f); EXPECT_FALSE(v);
        v=F; objectPointer.IfIterableObjects(f); EXPECT_FALSE(v);
        v=F; objectPointer.IfIterableObjectsPointer(f); EXPECT_FALSE(v);
        v=F; objectPointer.IfObjectAdaptor(f); EXPECT_FALSE(v);
        v=F; objectPointer.IfObjectAdaptorPointer(f); EXPECT_FALSE(v);
        v=F; objectPointer.IfObjectPointerArray(f); EXPECT_FALSE(v);
        v=F; objectPointer.IfObjectPointerArrayPointer(f); EXPECT_FALSE(v);
        v=F; objectPointer.IfIterableObjectPointers(f); EXPECT_FALSE(v);
        v=F; objectPointer.IfIterableObjectPointersPointer(f); EXPECT_FALSE(v);
        v=F; objectPointer.IfObjectPointerAdaptor(f); EXPECT_FALSE(v);
        v=F; objectPointer.IfObjectPointerAdaptorPointer(f); EXPECT_FALSE(v);
        v=F; objectPointer.IfIterablePrimitivePairs(f); EXPECT_FALSE(v);
        v=F; objectPointer.IfIterablePrimitivePairsPointer(f); EXPECT_FALSE(v);
        v=F; objectPointer.IfIterablePrimitivePointerPairs(f); EXPECT_FALSE(v);
        v=F; objectPointer.IfIterablePrimitivePointerPairsPointer(f); EXPECT_FALSE(v);
        v=F; objectPointer.IfIterableObjectPairs(f); EXPECT_FALSE(v);
        v=F; objectPointer.IfIterableObjectPairsPointer(f); EXPECT_FALSE(v);
        v=F; objectPointer.IfIterableObjectPointerPairs(f); EXPECT_FALSE(v);
        v=F; objectPointer.IfIterableObjectPointerPairsPointer(f); EXPECT_FALSE(v);
    }
    
};
